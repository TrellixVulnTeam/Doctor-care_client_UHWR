[{"/home/asus2/Frontend-React.JS-QuickStart/src/index.js":"1","/home/asus2/Frontend-React.JS-QuickStart/src/serviceWorker.js":"2","/home/asus2/Frontend-React.JS-QuickStart/src/redux.js":"3","/home/asus2/Frontend-React.JS-QuickStart/src/containers/App.js":"4","/home/asus2/Frontend-React.JS-QuickStart/src/hoc/IntlProviderWrapper.js":"5","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/HomePage.js":"6","/home/asus2/Frontend-React.JS-QuickStart/src/hoc/authentication.js":"7","/home/asus2/Frontend-React.JS-QuickStart/src/routes/Home.js":"8","/home/asus2/Frontend-React.JS-QuickStart/src/routes/System.js":"9","/home/asus2/Frontend-React.JS-QuickStart/src/routes/Doctor.js":"10","/home/asus2/Frontend-React.JS-QuickStart/src/components/CustomToast.js":"11","/home/asus2/Frontend-React.JS-QuickStart/src/components/CustomScrollbars.js":"12","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Header/Header.js":"13","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Auth/Login.js":"14","/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/rootReducer.js":"15","/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/actionTypes.js":"16","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DetailDoctor.js":"17","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/HeaderHome.js":"18","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/HomeFooter.js":"19","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/Specialty.js":"20","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/HandBook.js":"21","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/MedicalFacility.js":"22","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/OutStandingDoctor.js":"23","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/About.js":"24","/home/asus2/Frontend-React.JS-QuickStart/src/utils/index.js":"25","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Header/menuApp.js":"26","/home/asus2/Frontend-React.JS-QuickStart/src/components/Navigator.js":"27","/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/userReducer.js":"28","/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/appReducer.js":"29","/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/adminReducer.js":"30","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/UserManage.js":"31","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/UserRedux.js":"32","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/ManageDoctor.js":"33","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/ManageSchedule.js":"34","/home/asus2/Frontend-React.JS-QuickStart/src/services/userService.js":"35","/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/index.js":"36","/home/asus2/Frontend-React.JS-QuickStart/src/utils/ToastUtil.js":"37","/home/asus2/Frontend-React.JS-QuickStart/src/utils/LanguageUtils.js":"38","/home/asus2/Frontend-React.JS-QuickStart/src/utils/KeyCodeUtils.js":"39","/home/asus2/Frontend-React.JS-QuickStart/src/utils/CommonUtils.js":"40","/home/asus2/Frontend-React.JS-QuickStart/src/utils/constant.js":"41","/home/asus2/Frontend-React.JS-QuickStart/src/axios.js":"42","/home/asus2/Frontend-React.JS-QuickStart/src/components/Input/DatePicker.js":"43","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/TableManageUser.js":"44","/home/asus2/Frontend-React.JS-QuickStart/src/utils/emitter.js":"45","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/ModalUserEdit.js":"46","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/ModalUserDel.js":"47","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/ModalUser.js":"48","/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/adminActions.js":"49","/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/userActions.js":"50","/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/appActions.js":"51","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DoctorSchedule.js":"52","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DoctorExtraInfor.js":"53","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/Modal/BookingModal.js":"54","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/ProfileDoctor.js":"55","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/VerifyEmail.js":"56","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Specialty/ManageSpecialty.js":"57","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Specialty/DetailSpecialty.js":"58","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Clinic/ManageClinic.js":"59","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Clinic/DetailClinic.js":"60","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/ManagePatient.js":"61","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/RemedyModal.js":"62"},{"size":926,"mtime":1656130733422,"results":"63","hashOfConfig":"64"},{"size":5086,"mtime":1645286467842,"results":"65","hashOfConfig":"64"},{"size":1477,"mtime":1645286467841,"results":"66","hashOfConfig":"64"},{"size":4677,"mtime":1655983266215,"results":"67","hashOfConfig":"64"},{"size":1095,"mtime":1645286467841,"results":"68","hashOfConfig":"64"},{"size":1434,"mtime":1649082514465,"results":"69","hashOfConfig":"64"},{"size":789,"mtime":1645812028816,"results":"70","hashOfConfig":"64"},{"size":638,"mtime":1646488665074,"results":"71","hashOfConfig":"64"},{"size":1983,"mtime":1655972141248,"results":"72","hashOfConfig":"64"},{"size":1253,"mtime":1655995692528,"results":"73","hashOfConfig":"64"},{"size":2282,"mtime":1645286467832,"results":"74","hashOfConfig":"64"},{"size":3173,"mtime":1645286467832,"results":"75","hashOfConfig":"64"},{"size":2934,"mtime":1649756704278,"results":"76","hashOfConfig":"64"},{"size":4705,"mtime":1650123792952,"results":"77","hashOfConfig":"64"},{"size":1173,"mtime":1647959363722,"results":"78","hashOfConfig":"64"},{"size":2078,"mtime":1653990690216,"results":"79","hashOfConfig":"64"},{"size":4047,"mtime":1655026935937,"results":"80","hashOfConfig":"64"},{"size":6473,"mtime":1649697500566,"results":"81","hashOfConfig":"64"},{"size":719,"mtime":1646818499288,"results":"82","hashOfConfig":"64"},{"size":2916,"mtime":1655880694724,"results":"83","hashOfConfig":"64"},{"size":2561,"mtime":1646754526257,"results":"84","hashOfConfig":"64"},{"size":2695,"mtime":1655981578381,"results":"85","hashOfConfig":"64"},{"size":4291,"mtime":1649151951946,"results":"86","hashOfConfig":"64"},{"size":1662,"mtime":1646821750675,"results":"87","hashOfConfig":"64"},{"size":251,"mtime":1646319591461,"results":"88","hashOfConfig":"64"},{"size":2638,"mtime":1656062322944,"results":"89","hashOfConfig":"64"},{"size":9326,"mtime":1645286467837,"results":"90","hashOfConfig":"64"},{"size":830,"mtime":1647504004252,"results":"91","hashOfConfig":"64"},{"size":1229,"mtime":1650115585731,"results":"92","hashOfConfig":"64"},{"size":3282,"mtime":1653992661435,"results":"93","hashOfConfig":"64"},{"size":7594,"mtime":1646409647021,"results":"94","hashOfConfig":"64"},{"size":19091,"mtime":1648622325162,"results":"95","hashOfConfig":"64"},{"size":18637,"mtime":1655982866385,"results":"96","hashOfConfig":"64"},{"size":7938,"mtime":1653906252974,"results":"97","hashOfConfig":"64"},{"size":3302,"mtime":1656126008764,"results":"98","hashOfConfig":"64"},{"size":91,"mtime":1647514364495,"results":"99","hashOfConfig":"64"},{"size":3001,"mtime":1645286467850,"results":"100","hashOfConfig":"64"},{"size":961,"mtime":1645286467849,"results":"101","hashOfConfig":"64"},{"size":684,"mtime":1645286467849,"results":"102","hashOfConfig":"64"},{"size":389,"mtime":1648018728404,"results":"103","hashOfConfig":"64"},{"size":753,"mtime":1655983209570,"results":"104","hashOfConfig":"64"},{"size":750,"mtime":1645718300091,"results":"105","hashOfConfig":"64"},{"size":5954,"mtime":1645286467834,"results":"106","hashOfConfig":"64"},{"size":3402,"mtime":1648396146713,"results":"107","hashOfConfig":"64"},{"size":161,"mtime":1646319472711,"results":"108","hashOfConfig":"64"},{"size":4182,"mtime":1646409204768,"results":"109","hashOfConfig":"64"},{"size":1533,"mtime":1646325607335,"results":"110","hashOfConfig":"64"},{"size":4968,"mtime":1646407423013,"results":"111","hashOfConfig":"64"},{"size":10691,"mtime":1655983166413,"results":"112","hashOfConfig":"64"},{"size":412,"mtime":1645811877230,"results":"113","hashOfConfig":"64"},{"size":448,"mtime":1646650496850,"results":"114","hashOfConfig":"64"},{"size":7740,"mtime":1655918992505,"results":"115","hashOfConfig":"64"},{"size":7017,"mtime":1655887450163,"results":"116","hashOfConfig":"64"},{"size":10331,"mtime":1656068335287,"results":"117","hashOfConfig":"64"},{"size":5656,"mtime":1655918679177,"results":"118","hashOfConfig":"64"},{"size":2391,"mtime":1655479126995,"results":"119","hashOfConfig":"64"},{"size":3818,"mtime":1655735798757,"results":"120","hashOfConfig":"64"},{"size":6865,"mtime":1655956782551,"results":"121","hashOfConfig":"64"},{"size":4182,"mtime":1655972899124,"results":"122","hashOfConfig":"64"},{"size":4593,"mtime":1655982230614,"results":"123","hashOfConfig":"64"},{"size":7882,"mtime":1656134115701,"results":"124","hashOfConfig":"64"},{"size":3512,"mtime":1656135277201,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"5f5dkb",{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"128"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"128"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"128"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"128"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"128"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"128"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"128"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"128"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"128"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"128"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"128"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"128"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"128"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"128"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"128"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"128"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"128"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"128"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"128"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"128"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/asus2/Frontend-React.JS-QuickStart/src/index.js",[],["279","280"],"/home/asus2/Frontend-React.JS-QuickStart/src/serviceWorker.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/redux.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/App.js",["281","282"],"import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ConnectedRouter as Router } from 'connected-react-router';\r\nimport { history } from '../redux'\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\n\r\nimport { userIsAuthenticated, userIsNotAuthenticated } from '../hoc/authentication';\r\n\r\nimport { path } from '../utils'\r\n\r\nimport Home from '../routes/Home';\r\nimport Login from './Auth/Login';\r\nimport Header from './Header/Header';\r\nimport System from '../routes/System';\r\nimport Doctor from '../routes/Doctor';\r\n\r\n\r\nimport { CustomToastCloseButton } from '../components/CustomToast';\r\nimport HomePage from './HomePage/HomePage.js'; \r\nimport CustomScrollbars from \"../components/CustomScrollbars\"\r\nimport DetailDoctor from './Patient/Doctor/DetailDoctor';\r\n\r\nimport VerifyEmail from './Patient/VerifyEmail';\r\nimport DetailSpecialty from './Patient/Specialty/DetailSpecialty';\r\n\r\nimport DetailClinic from './Patient/Clinic/DetailClinic';\r\n\r\nclass App extends Component {\r\n\r\n    handlePersistorState = () => {\r\n        const { persistor } = this.props;\r\n        let { bootstrapped } = persistor.getState();\r\n        if (bootstrapped) {\r\n            if (this.props.onBeforeLift) {\r\n                Promise.resolve(this.props.onBeforeLift())\r\n                    .then(() => this.setState({ bootstrapped: true }))\r\n                    .catch(() => this.setState({ bootstrapped: true }));\r\n            } else {\r\n                this.setState({ bootstrapped: true });\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handlePersistorState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Router history={history}>\r\n                    <div className=\"main-container\">\r\n                       \r\n                        {/* {this.props.isLoggedIn && <Header />} */}\r\n\r\n                        <div className=\"content-container\">\r\n                            <CustomScrollbars style={{height:'100vh', width:'100%'}}>\r\n                                <Switch>\r\n                                    <Route path={path.HOME} exact component={(Home)} />\r\n                                    <Route path={path.LOGIN} component={userIsNotAuthenticated(Login)} />\r\n                                    <Route path={path.SYSTEM} component={userIsAuthenticated(System)} />\r\n                                    {/* <Route path={'/doctor/'} component={userIsNotAuthenticated(Doctor)} /> */}\r\n                                    {/* <Route path={path.DOCTOR} component={userIsNotAuthenticated(Doctor)} /> */}\r\n                                    <Route path={path.DOCTOR} component={Doctor} />\r\n\r\n                                    <Route path={path.HOMEPAGE} component={HomePage} />\r\n                                    <Route path={path.DETAIL_DOCTOR} component={DetailDoctor} />\r\n\r\n                                    <Route path={path.DETAIL_SPECIALTY} component={DetailSpecialty}/>\r\n\r\n                                    <Route path={path.DETAIL_CLINIC} component={DetailClinic}/>\r\n\r\n                                    <Route path={path.VERIFY_EMAIL_BOOKING} component= {VerifyEmail}/>\r\n\r\n                                </Switch>\r\n                            </CustomScrollbars>\r\n                        </div>\r\n\r\n                        {/* <ToastContainer\r\n                            className=\"toast-container\" toastClassName=\"toast-item\" bodyClassName=\"toast-item-body\"\r\n                            autoClose={false} hideProgressBar={true} pauseOnHover={false}\r\n                            pauseOnFocusLoss={true} closeOnClick={false} draggable={false}\r\n                            closeButton={<CustomToastCloseButton />}\r\n                        /> */}\r\n                        <ToastContainer\r\n                            position =\"bottom-right\"\r\n                            autoClose={5000}\r\n                            hideProgressBar={false}\r\n                            newestOnTop={false}\r\n                            closeOnClick\r\n                            rtl={false}\r\n                            pauseOnHover\r\n                            draggable\r\n                            pauseOnFocusLoss\r\n                        />\r\n                    </div>\r\n                </Router>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        started: state.app.started,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","/home/asus2/Frontend-React.JS-QuickStart/src/hoc/IntlProviderWrapper.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/HomePage.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/hoc/authentication.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/routes/Home.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/routes/System.js",["283"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UserManage from '../containers/System/UserManage';\r\nimport UserRedux from '../containers/System/Admin/UserRedux';\r\nimport Header from '../containers/Header/Header';\r\nimport ManageDoctor from '../containers/System/Admin/ManageDoctor';\r\nimport ManageSpecialty from '../containers/System/Specialty/ManageSpecialty';\r\nimport ManageClinic from '../containers/System/Clinic/ManageClinic';\r\nclass System extends Component {\r\n    render() {\r\n        \r\n        const { systemMenuPath, isLoggedIn } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n            {this.props.isLoggedIn && <Header />}\r\n            <div className=\"system-container\">\r\n                <div className=\"system-list\">\r\n                    <Switch>\r\n                        <Route path=\"/system/user-manage\" component={UserManage} />\r\n                        <Route path=\"/system/user-redux\" component={UserRedux} />\r\n                        <Route path=\"/system/manage-doctor\" component={ManageDoctor} />\r\n                        <Route path=\"/system/manage-specialty\" component = {ManageSpecialty} />\r\n                        <Route path=\"/system/manage-clinic\" component = {ManageClinic} />\r\n\r\n                        {/* <Route path=\"/system/register-package-group-or-account\" component={RegisterPackageGroupOrAcc} /> */}\r\n                        <Route component={() => { return (<Redirect to={systemMenuPath} />) }} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(System);\r\n","/home/asus2/Frontend-React.JS-QuickStart/src/routes/Doctor.js",["284","285"],"import React, { Component } from 'react';\r\nimport{connect} from \"react-redux\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport ManageSchedule from '../containers/System/Doctor/ManageSchedule';\r\nimport Header from '../containers/Header/Header';\r\nimport ManagePatient from '../containers/System/Doctor/ManagePatient';\r\n\r\nclass Doctor extends Component {\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.isLoggedIn && <Header />}\r\n                <div className=\"system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/doctor/manage-schedule\"  component= {ManageSchedule}/>\r\n                            <Route path=\"/doctor/manage-patient\" component={ManagePatient}/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        \r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Doctor);","/home/asus2/Frontend-React.JS-QuickStart/src/components/CustomToast.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/components/CustomScrollbars.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Header/Header.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Auth/Login.js",["286"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n\r\nimport * as actions from \"../../store/actions\";\r\nimport '../Auth/Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { handleLoginApi } from '../../services/userService';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {//khoi tao state\r\n            username: '',\r\n            password: '',\r\n            isShowPassword: false,\r\n            errMessage:''\r\n\r\n        }\r\n    }\r\n    //cap nhat lai gia tri cho state\r\n    handleOnChangeUsername = (event) => {\r\n        this.setState({\r\n            username: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePassword = (event) => {\r\n        this.setState({\r\n            password: event.target.value\r\n        })\r\n    }\r\n    handleLogin = async () => {\r\n        // console.log('username: ', this.state.username , 'password: ', this.state.password)\r\n        // , tuong duong +\r\n        // console.log('allstate', this.state)\r\n        //xoa message loi moi khi thuc hien\r\n        this.setState({\r\n            errMessage:''\r\n        })\r\n        try{\r\n            let data = await handleLoginApi(this.state.username, this.state.password);\r\n            if(data && data.errCode !==0){\r\n                this.setState({\r\n                    errMessage: data.message\r\n                    \r\n                })\r\n                console.log(data);\r\n            }\r\n            if(data && data.errCode === 0){\r\n                //todo \r\n                this.props.userLoginSuccess(data.user)\r\n                console.log('login success')\r\n            }\r\n        }catch(e){\r\n            if(e.response){\r\n                if(e.response.data){\r\n                    this.setState({\r\n                        erressage: e.response.data.message\r\n                    })\r\n                }\r\n            }\r\n            console.log(e.response);           \r\n        }\r\n        \r\n    }\r\n    handleShowHidePassword = () => {\r\n        this.setState({\r\n            isShowPassword: !this.state.isShowPassword\r\n        })\r\n    }\r\n    handleKeyDown = (event) => {\r\n        if (event.key === 'Enter' || event.keyCode === 13) {\r\n            this.handleLogin();\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"custom\">\r\n                    <label for=\"email\">Email address:</label>\r\n                    <input type=\"email\" \r\n                    class=\"form-control\" \r\n                    placeholder=\"Enter email\" \r\n                    id=\"email\"\r\n                    value={this.state.username}\r\n                    onChange={(event)=> this.handleOnChangeUsername(event)}\r\n                    />\r\n                    <label for=\"pwd\">Password:</label>\r\n                    <div className=\"custom-input-password\">\r\n                        <input type={this.state.isShowPassword ? 'text' : 'password'} \r\n                        class=\"form-control\" \r\n                        placeholder=\"Enter password\" \r\n                        id=\"pwd\"\r\n                        onChange={(event)=> this.handleOnChangePassword(event)}\r\n                        onKeyDown = {(event) => this.handleKeyDown(event)}\r\n                        />\r\n                        <span onClick={() => {this.handleShowHidePassword()}}>\r\n                            \r\n                            <i class={this.state.isShowPassword ? 'fa fa-eye' : 'far fa-eye-slash'}></i>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    \r\n                    <div class=\"form-check\">\r\n                        <label class=\"form-check-label\">\r\n                        <input class=\"form-check-input\" type=\"checkbox\"/> Remember me\r\n                        </label>\r\n                    </div>\r\n                    <button type=\"submit\" class=\"btn btn-primary\"\r\n                    onClick={()=> {this.handleLogin()}}\r\n                    >Login</button>\r\n                    <div class=\"mess\" style={{color:'red'}} >\r\n                    {this.state.errMessage}\r\n                    </div>\r\n                    \r\n               </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        // userLoginFail: () => dispatch(actions.adminLoginFail()),\r\n        userLoginSuccess: (userInfo) => dispatch(actions.userLoginSuccess(userInfo)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/rootReducer.js",["287"],"import {combineReducers} from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport appReducer from \"./appReducer\";\r\nimport userReducer from \"./userReducer\";\r\nimport adminReducer from \"./adminReducer\";\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\n// const adminPersistConfig = {\r\n//     ...persistCommonConfig,\r\n//     key: 'admin',\r\n//     whitelist: ['isLoggedIn', 'adminInfo']\r\n// };\r\n\r\nconst userPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'user',\r\n    whitelist: ['isLoggedIn', 'userInfo']\r\n};\r\n\r\nconst appPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'app',\r\n    whitelist: ['language']\r\n}\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    // admin: persistReducer(adminPersistConfig, adminReducer),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: adminReducer\r\n}) ","/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/actionTypes.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DetailDoctor.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/HeaderHome.js",["288","289"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './HomeHeader.scss';\r\nimport logo from '../../assets/images/bookingcare-2020.svg';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {LANGUAGES} from \"../../utils\";\r\nimport { changeLanguageApp } from '../../store/actions';\r\nimport {withRouter} from 'react-router';\r\nclass HeaderHome extends Component {\r\n\r\n    changeLanguage = (language) => {\r\n        //fire redux event : actions\r\n        this.props.changeLanguageAppRedux(language);\r\n    }\r\n    //bootstrap = đã khởi động thành công\r\n    returnToHome = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/home`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let language = this.props.language;\r\n        console.log('check userinfo:', this.props.userInfo);\r\n        return (\r\n            <React.Fragment>\r\n            <div className=\"header-home-container\">\r\n                <div className=\"home-header-content\">\r\n                    <div className=\"left-content\">\r\n                        <i className=\"fa fa-bars\"></i>\r\n                        <img className=\"header-logo\" src={logo} onClick={()=> this.returnToHome()}/>\r\n                        \r\n                    </div>\r\n                    <div className=\"center-content\">\r\n                        <div className=\"child-content\">\r\n                            <div><b><FormattedMessage id=\"homeheader.speciality\"/></b></div>\r\n                            <div className=\"sub-title\"><FormattedMessage id=\"homeheader.searchdoctor\"/></div>\r\n                        </div>\r\n                        <div className=\"child-content\">\r\n                            <div><b><FormattedMessage id=\"homeheader.health-facility\"/></b></div>\r\n                            <div className=\"sub-title\"><FormattedMessage id=\"homeheader.select-room\"/></div>\r\n                        </div>\r\n                        <div className=\"child-content\">\r\n                            <div><b><FormattedMessage id=\"homeheader.doctor\"/></b></div>\r\n                            <div className=\"sub-title\"><FormattedMessage id=\"homeheader.select-doctor\"/></div>\r\n                        </div>\r\n                        <div className=\"child-content\">\r\n                            <div><b><FormattedMessage id=\"homeheader.fee\"/></b></div>\r\n                            <div className=\"sub-title\"><FormattedMessage id=\"homeheader.check-health\"/></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"right-content\">\r\n                        <div className=\"support\"> <i className=\"fa fa-question-circle\"></i><FormattedMessage id=\"homeheader.support\"/></div>\r\n                        <div className={language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'}>\r\n                            <span onClick={() => this.changeLanguage(LANGUAGES.VI)}>VN</span>\r\n                        </div>\r\n                        <div className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}>\r\n                            <span onClick={() => this.changeLanguage(LANGUAGES.EN)}>EN</span></div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            {this.props.isShowBanner == true &&\r\n                <div className=\"home-header-banner\">\r\n                    <div className=\"content-up\">\r\n                        <div className=\"title1\"><FormattedMessage id=\"banner.title1\"/></div>\r\n                        <div className=\"title2\"><FormattedMessage id=\"banner.title2\"/> </div>\r\n                        <div className=\"search\">\r\n                            <i className=\"fas fa-search\"></i>\r\n                            <input type=\"text\" placeholder=\"Tìm chuyên khoa khám bệnh\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content-down\">\r\n                        <div className=\"options\">\r\n                            <div className=\"option-child\">\r\n                                <div className=\"icon-child\"><i className=\"fa fa-hospital\"></i></div>\r\n                                <div className=\"text-child\"><FormattedMessage id=\"banner.child1\"/></div>\r\n                            </div>\r\n                            <div className=\"option-child\">\r\n                                <div className=\"icon-child\"><i className=\"fa fa-hospital\"></i></div>\r\n                                <div className=\"text-child\"><FormattedMessage id=\"banner.child2\"/></div>\r\n                            </div>\r\n                            <div className=\"option-child\">\r\n                                <div className=\"icon-child\"><i className=\"fa fa-hospital\"></i></div>\r\n                                <div className=\"text-child\"><FormattedMessage id=\"banner.child3\"/></div>\r\n                            </div>\r\n                            <div className=\"option-child\">\r\n                                <div className=\"icon-child\"><i className=\"fa fa-hospital\"></i></div>\r\n                                <div className=\"text-child\"><FormattedMessage id=\"banner.child4\"/></div>\r\n                            </div>\r\n                            <div className=\"option-child\">\r\n                                <div className=\"icon-child\"><i className=\"fa fa-hospital\"></i></div>\r\n                                <div className=\"text-child\"><FormattedMessage id=\"banner.child5\"/></div>\r\n                            </div>\r\n                            <div className=\"option-child\">\r\n                                <div className=\"icon-child\"><i className=\"fa fa-hospital\"></i></div>\r\n                                <div className=\"text-child\"><FormattedMessage id=\"banner.child6\"/></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }    \r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n//state cua ham reduce\r\n//map state cua redux và tiem vao react , react co the lay state qua this.props\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo,\r\n        language: state.app.language,\r\n    };\r\n};\r\n//fire event cua redux\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeLanguageAppRedux: (language) => dispatch(changeLanguageApp(language))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HeaderHome));","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/HomeFooter.js",["290","291","292"],"import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Slider from 'react-slick';\r\n\r\nclass HomeFooter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"home-footer\">\r\n                <p>&copy; 2022 Acira392. More information, pls visit my youtube channel. <a target=\"blank\" href=\"#\"> &#8594; CLick here &#8592; </a></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLogged,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/Specialty.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/HandBook.js",["293"],"import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './MedicalFacility.scss';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Slider from 'react-slick';\r\n\r\nclass HandBook extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section-share section-handbook\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">Cẩm Nang</span>\r\n                        <button className=\"btn-section\">Xem them</button>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\"/>\r\n                                <div>Xương cơ khớp1</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\"/>\r\n                                <div>Xương cơ khớp2</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\"/>\r\n                                <div>Xương khớp3</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\"/>\r\n                                <div>Xương khớp4</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\"/>\r\n                                <div>Xương khớp5</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\"/>\r\n                                <div>Xương khớp6</div>\r\n                            </div>\r\n                        </Slider>\r\n                    </div>\r\n                    \r\n                </div> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLogged,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HandBook)","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/MedicalFacility.js",["294"],"import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './MedicalFacility.scss';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Slider from 'react-slick';\r\nimport {getAllClinic} from '../../../services/userService';\r\nimport {withRouter} from 'react-router';\r\n\r\nclass MedicalFacility extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            dataClinics: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        let res = await getAllClinic();\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataClinics: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n\r\n    handleViewDetailClinic = (clinic) => {\r\n        if (this.props.history){\r\n            this.props.history.push(`/detail-clinic/${clinic.id}`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {dataClinics} = this.state;\r\n        \r\n        return (\r\n            <div className=\"section-share section-medical-facility\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">Chuyen khoa</span>\r\n                        <button className=\"btn-section\">Xem them</button>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            {dataClinics && dataClinics.length > 0 && dataClinics.map((item, index) => {\r\n                                return (\r\n                                    <div className=\"section-customize clinic-child\"\r\n                                        key = {index}\r\n                                        onClick={() => this.handleViewDetailClinic(item)}>\r\n                                            <div className=\"bg-image section-medical-facility\"\r\n                                                style = {{backgroundImage: `url(${item.image})`}}>\r\n\r\n                                            </div>\r\n                                            <div className=\"clinic-name\">{item.name}</div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            \r\n                        </Slider>\r\n                    </div>\r\n                    \r\n                </div> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLogged,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MedicalFacility))","/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/OutStandingDoctor.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/HomePage/section/About.js",["295","296"],"import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Slider from 'react-slick';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section-share section-about\">\r\n                <div className=\"section-about-header\">\r\n                    Triều thông nói gì về Acira392\r\n                </div>\r\n                <div className=\"section-about-content\">\r\n                    <div className=\"content-left\">\r\n                        <iframe width=\"100%\" height=\"400px\"\r\n                            src=\"https://www.youtube.com/embed/mw5VIEIvuMI\"\r\n                            title=\"YouTube video player\"\r\n                            frameborder=\"0\"\r\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                            allowFullScreen>\r\n                        </iframe>\r\n                    </div>\r\n                    <div className=\"content-right\">\r\n                        <p>\r\n                        Disney+ is the only place to stream your favorites from Disney, Pixar, Marvel, Star Wars, National Geographic and more. Access it all at https://disneymusic.co/JoinDisneyPlus...\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLogged,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);","/home/asus2/Frontend-React.JS-QuickStart/src/utils/index.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Header/menuApp.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/components/Navigator.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/userReducer.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/appReducer.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/store/reducers/adminReducer.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/UserManage.js",["297"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\nimport {getAllUsers, createNewUserService, deleteUserService, editUserService} from '../../services/userService'\r\nimport ModalUser from './ModalUser';\r\nimport ModalUserDel from './ModalUserDel';\r\nimport ModalUserEdit from './ModalUserEdit';\r\nimport {emitter} from '../../utils/emitter';\r\nclass UserManage extends Component {\r\n    //khoi tao state(bien) dung voi class\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrUsers: [],\r\n            isOpenModalUser:false,\r\n            isOpenModalUserDel:false,\r\n            isOpenModalUserEdit: false,\r\n            valueuser:{}\r\n        }\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        this.setState({\r\n            isOpenModalUser:true,\r\n        })\r\n    }\r\n    toggleUserModal = () => {\r\n        this.setState({\r\n            isOpenModalUser: !this.state.isOpenModalUser,\r\n        })\r\n    }\r\n\r\n    handledelUser = (user) => {\r\n        this.setState({\r\n            isOpenModalUserDel:true,\r\n            valueuser:user\r\n        })\r\n    }\r\n    toggleDeleteUserModal = () => {\r\n        this.setState({\r\n            isOpenModalUserDel: !this.state.isOpenModalUserDel,\r\n        })\r\n    }\r\n\r\n    toggleEditUserModal = () => {\r\n        this.setState({\r\n            isOpenModalUserEdit: !this.state.isOpenModalUserEdit,\r\n        })\r\n    }\r\n\r\n    handleEditUser = (user) => {\r\n        console.log(user)\r\n        this.setState({\r\n            isOpenModalUserEdit: true,\r\n            valueuser:user\r\n        })\r\n    }\r\n\r\n    createNewUser = async(data) => {\r\n        try {\r\n            let response = await createNewUserService(data)\r\n            if(response && response.errCode !==0) {\r\n                alert(response.errMessage)\r\n            }else {\r\n                await this.getAllUsersFromReact();\r\n                //sau khi them xong se tu tat modal\r\n                this.setState({\r\n                    isOpenModalUser: false,\r\n                })\r\n                emitter.emit('EVENT_CLEAR_MODAL_DATA')\r\n            }\r\n        }catch (e) {\r\n            console.log(e)\r\n        }\r\n        \r\n        console.log('check data',data)\r\n    }\r\n\r\n    EditUser = async(data) => {\r\n        console.log('data',data)\r\n        try{\r\n            let response = await editUserService(data)\r\n            if(response && response.errCode !==0) {\r\n                alert(response.errMessage)\r\n            }else {\r\n                console.log(response)\r\n                await this.getAllUsersFromReact();\r\n                this.setState({\r\n                    isOpenModalUserEdit: false\r\n                })\r\n            }\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        /** life cycle (vong doi)\r\n         * run component\r\n         * 1.run constructor -> state\r\n         * 2.did mount (set state) (set gia tri cua cac bien truoc khi render)(goi api lay gia tri va setstate cho component-> state luu lai gia tri cua cac bien)\r\n         * set <-> born , die <-> unmount\r\n         * 3.render\r\n         * \r\n        */\r\n        \r\n        await this.getAllUsersFromReact();\r\n    }\r\n    getAllUsersFromReact = async() => {\r\n        let response = await getAllUsers('ALL');\r\n        if(response && response.errCode === 0){\r\n            //yeu cau render lai\r\n            this.setState({\r\n                arrUsers: response.user\r\n            })\r\n        }\r\n    }\r\n    handleDeleteUser = async() => {\r\n        let a = this.state.valueuser;\r\n        console.log('delete user', a)\r\n        try{\r\n            let res = await deleteUserService(a.id);\r\n            if(res && res.errCode === 0){\r\n                await this.getAllUsersFromReact();\r\n                this.setState({\r\n                    isOpenModalUserDel: false,})\r\n            }else{\r\n                alert(res.errMessage)\r\n            }\r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        let arrUsers = this.state.arrUsers;\r\n        console.log('render', this.state.arrUsers )\r\n        return (\r\n            <div className=\"user-container\">\r\n                \r\n                <ModalUser \r\n                    isOpenModalUser={ this.state.isOpenModalUser }\r\n                    toggleFromParent={this.toggleUserModal}\r\n                    createNewUser = {this.createNewUser}\r\n                    \r\n                />\r\n                <ModalUserDel\r\n                    toggleFromParent1={this.toggleDeleteUserModal}\r\n                    isOpenModalUserDel={this.state.isOpenModalUserDel}\r\n                    handleDeleteUser={this.handleDeleteUser}\r\n                />\r\n                {\r\n                    this.state.isOpenModalUserEdit &&\r\n                    <ModalUserEdit\r\n                    toggleFromParentEdit={this.toggleEditUserModal}\r\n                    isOpenModalUserEdit={this.state.isOpenModalUserEdit}\r\n                    EditUser={this.EditUser}\r\n                    lastData = {this.state.valueuser}   \r\n                    />\r\n                }\r\n                \r\n                <div className=\"title\">\r\n                    Manage user with mh\r\n                </div>\r\n                <div className=\"mx-1\">\r\n                    {/* px 1- 5  p(pading) x(truc ox)*/}\r\n                    <button className=\"btn btn-primary px-3\" onClick = {() => this.handleAddNewUser()}>\r\n                        <i className=\"fas fa-plus\"></i>Add new user</button>\r\n                </div>\r\n                <div className=\"users-table mt-3 mx-1\">\r\n                <table id=\"customers\">\r\n                    <tr>\r\n                        <th>Email</th>\r\n                        <th>First name</th>\r\n                        <th>Last name</th>\r\n                        <th>Address</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                                                        \r\n                        {arrUsers && arrUsers.map((item, index) => {\r\n                            console.log('check', item, index)\r\n                            return(\r\n                                <tr>\r\n                                    <td>{item.email}</td>\r\n                                    <td>{item.firstName}</td>\r\n                                    <td>{item.lastName}</td>\r\n                                    <td>{item.address}</td>\r\n                                    <td>\r\n                                        <button className=\"btn-edit\"\r\n                                        onClick={() => this.handleEditUser(item)}>\r\n                                        <i class=\"fas fa-pencil-alt\"></i>\r\n                                        </button>\r\n                                        <button className=\"btn-delete\"\r\n                                        onClick={() => this.handledelUser(item)}>\r\n                                        <i class=\"fa fa-trash-alt\"></i>\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                        }                       \r\n                                      \r\n                </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/UserRedux.js",["298","299"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport {LANGUAGES , CRUD_Actions, CommonUtils} from '../../../utils';\r\nimport * as actions from '../../../store/actions';\r\nimport './UserRedux.scss';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport TableManageUser from './TableManageUser';\r\nclass UserRedux extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            genderArr: [],\r\n            positionArr: [],\r\n            roleArr: [],\r\n            previewImgURL:'',\r\n            isOpen: false,\r\n            email:'',\r\n            password:'',\r\n            firstName:'',\r\n            lastName:'',\r\n            phoneNumber:'',\r\n            address:'',\r\n            gender:'',\r\n            position: '',\r\n            role: '',\r\n            avatar:'',\r\n\r\n            action:'',\r\n            userEditId:'',\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getGenderStart();\r\n        this.props.getPositionStart();\r\n        this.props.getRoleStart();\r\n    }\r\n    componentDidUpdate(prevProps,prevState, snapshot) {\r\n        //render => disupdate\r\n        //hien tai (this) và quá khứ(previous)\r\n        if(prevProps.genderRedux !== this.props.genderRedux) {\r\n            let arrGenders = this.props.genderRedux;\r\n            this.setState({\r\n                genderArr: arrGenders,\r\n                gender:arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : ''\r\n\r\n            })\r\n        }\r\n        if(prevProps.roleRedux !== this.props.roleRedux) {\r\n            let arrRoles = this.props.roleRedux\r\n            this.setState({\r\n                roleArr: arrRoles,\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : ''\r\n            })\r\n        }\r\n        if(prevProps.positionRedux !== this.props.positionRedux) {\r\n            let arrPositions = this.props.positionRedux\r\n            this.setState({\r\n                positionArr:  arrPositions,\r\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.listUsers !== this.props.listUsers){\r\n            let arrGenders = this.props.genderRedux;\r\n            let arrRoles = this.props.roleRedux;\r\n            let arrPositions = this.props.positionRedux;\r\n            this.setState({\r\n                email:'',\r\n                password:'',\r\n                firstName:'',\r\n                lastName:'',\r\n                phoneNumber:'',\r\n                address:'',\r\n                gender:arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\r\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\r\n                avatar:'',\r\n                action: CRUD_Actions.CREATE,\r\n                previewImgURL:'',\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objecUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objecUrl,\r\n                avatar:base64,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSaveUser = () => {\r\n        let isValid=this.checkVakidateInput();\r\n        if(isValid===false) return;\r\n        let {action} = this.state;\r\n        //tương tự vói let action = this.state.action;\r\n        //fire redux action (create user)\r\n\r\n        if (action === CRUD_Actions.CREATE){\r\n            this.props.createNewUser({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                phonenumber: this.state.phoneNumber,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar\r\n            })\r\n            console.log('create', this.props.createNewUser())\r\n        }\r\n        if(action === CRUD_Actions.EDIT){\r\n            // fire redux edit user\r\n            this.props.editAUserRedux({ \r\n                id: this.state.userEditId,\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                phonenumber: this.state.phoneNumber,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar\r\n            })\r\n        } \r\n    }\r\n    checkVakidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['email', 'password', 'firstName', 'lastName', 'phoneNumber', 'address']\r\n        for(let i = 0; i<arrCheck.length; i++){\r\n            if(!this.state[arrCheck[i]]){\r\n                isValid = false;\r\n                alert('this input is required:'+ arrCheck[i])\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    onChangeInput = (event, id) => {\r\n        let copyState = {...this.state}\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        })\r\n    }\r\n\r\n    openPreviewImage = () => {\r\n        if(!this.state.previewImgURL) return;\r\n        this.setState({\r\n           isOpen:true,\r\n        })\r\n    }\r\n\r\n    handleEditUserFromParent = (user) => {\r\n        let imageBase64 = '';\r\n        if (user.image){\r\n            imageBase64 = new Buffer(user.image, 'base64').toString('binary');\r\n        }\r\n        this.setState({\r\n            email:user.email,\r\n            password:'HARDCODE',\r\n            firstName:user.firstName,\r\n            lastName:user.lastName,\r\n            phoneNumber:user.phonenumber,\r\n            address:user.address,\r\n            gender:user.gender,\r\n            position: user.positionId,\r\n            role: user.roleId,\r\n            avatar:'',\r\n            previewImgURL:imageBase64,\r\n            action: CRUD_Actions.EDIT,\r\n            userEditId: user.id,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let genders = this.state.genderArr;\r\n        let language = this.props.language;\r\n        let isGetGenders = this.props.isLoadingGender;\r\n        let roles = this.state.roleArr;\r\n        let positions = this.state.positionArr;\r\n        \r\n        let {email, password, firstName, lastName, phoneNumber, address, gender, position, role, avatar} = this.state;\r\n\r\n\r\n        return (\r\n            <div className=\"user-redux-container\">\r\n                <div className=\"title\">Learn React-Redux</div>\r\n                <div className=\"user-redux-body\" >\r\n                    <div className=\"user-redux-body\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group col-md-3\"><FormattedMessage id=\"manage-user.add\"/></div>\r\n                                <div className=\"col-12\">{isGetGenders === true ? 'Loading genders' : ''}</div>\r\n                                <form>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputEmail4\"><FormattedMessage id=\"manage-user.email\"/></label>\r\n                                            <input type=\"email\" class=\"form-control\" id=\"inputEmail4\" placeholder=\"Email\"\r\n                                            value={email}\r\n                                            onChange={(event) => {this.onChangeInput(event,'email')}}\r\n                                            disabled={this.state.action === CRUD_Actions.EDIT ? true : false}\r\n                                            />\r\n                                        </div>\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputPassword4\"><FormattedMessage id=\"manage-user.password\"/></label>\r\n                                            <input type=\"password\" class=\"form-control\" id=\"inputPassword4\" placeholder=\"Password\"\r\n                                            value={password}\r\n                                            onChange={(event) => {this.onChangeInput(event,'password')}}\r\n                                            disabled={this.state.action === CRUD_Actions.EDIT ? true : false}\r\n                                            />\r\n                                        </div>\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputEmail4\"><FormattedMessage id=\"manage-user.first-name\"/></label>\r\n                                            <input type=\"text\" class=\"form-control\" id=\"inputEmail4\" placeholder=\"First Name\"\r\n                                            value={firstName}\r\n                                            onChange={(event) => {this.onChangeInput(event,'firstName')}}\r\n                                            />\r\n                                        </div>\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputEmail4\"><FormattedMessage id=\"manage-user.last-name\"/></label>\r\n                                            <input type=\"text\" class=\"form-control\" id=\"inputEmail4\" placeholder=\"LastName\"\r\n                                            value={lastName}\r\n                                            onChange={(event) => {this.onChangeInput(event,'lastName')}}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"form-group col-md-6\">\r\n                                            <label for=\"inputEmail4\"><FormattedMessage id=\"manage-user.phone-number\"/></label>\r\n                                            <input type=\"number\" class=\"form-control\" id=\"inputEmail4\" placeholder=\"Phone number\"\r\n                                            value={phoneNumber}\r\n                                            onChange={(event) => {this.onChangeInput(event,'phoneNumber')}}\r\n                                            />\r\n                                        </div>\r\n                                        <div class=\"form-group col-md-6\">\r\n                                            <label for=\"inputEmail4\"><FormattedMessage id=\"manage-user.address\"/></label>\r\n                                            <input type=\"text\" class=\"form-control\" id=\"inputEmail4\" placeholder=\"Address\"\r\n                                            value={address}\r\n                                            onChange={(event) => {this.onChangeInput(event,'address')}}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">                                       \r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputState\"><FormattedMessage id=\"manage-user.gender\"/></label>\r\n                                            <select id=\"inputState\" class=\"form-control\"\r\n                                            onChange = {(event) => {this.onChangeInput(event,'gender')}}\r\n                                            value = {gender}\r\n                                            >\r\n                                                {genders && genders.length > 0 && \r\n                                                genders.map((item, index) =>{\r\n                                                    return (\r\n                                                        <option key={index} value={item.keyMap}>\r\n                                                            {language === LANGUAGES.VI ? item.valueVI : item.valueEN}</option>\r\n                                                    )\r\n                                                })\r\n                                                }\r\n                                                \r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputState\"><FormattedMessage id=\"manage-user.position\"/></label>\r\n                                            <select id=\"inputState\" class=\"form-control\"\r\n                                            onChange = {(event) => {this.onChangeInput(event,'position')}}\r\n                                            value={position}\r\n                                            >\r\n                                                {positions && positions.length > 0 && \r\n                                                positions.map((item, index) =>{\r\n                                                    return (\r\n                                                        <option key={index} value={item.keyMap}>{language === LANGUAGES.VI ? item.valueVI : item.valueEN}</option>\r\n                                                    )\r\n                                                })\r\n                                                }\r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputState\"><FormattedMessage id=\"manage-user.role\"/></label>\r\n                                            <select id=\"inputState\" class=\"form-control\"\r\n                                            onChange = {(event) => {this.onChangeInput(event,'role')}}\r\n                                            value={role}\r\n                                            >\r\n                                                {roles && roles.length > 0 && \r\n                                                roles.map((item, index) =>{\r\n                                                    return (\r\n                                                        <option key={index} value={item.keyMap}>{language === LANGUAGES.VI ? item.valueVI : item.valueEN}</option>\r\n                                                    )\r\n                                                })\r\n                                                }\r\n                                            </select>\r\n                                        </div>\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <label for=\"inputZip\"><FormattedMessage id=\"manage-user.image\"/></label>\r\n                                            <div className=\"preview-img-container\">\r\n                                                <input type=\"file\" id=\"previewImg\" hidden\r\n                                                onChange={(event) => this.handleOnchangeImage(event)}\r\n                                                />\r\n                                                <label className=\"label-upload\" htmlFor=\"previewImg\">Tải Ảnh <i className=\"fas fa-upload\"></i></label>\r\n                                                <div class=\"preview-image\"\r\n                                                    style={{backgroundImage:`url(${this.state.previewImgURL})`}}\r\n                                                    onClick={()=> this.openPreviewImage()}\r\n                                                ></div>\r\n                                            </div>\r\n                                              \r\n                                        </div>\r\n                                        <div class=\"form-group col-md-3\">\r\n                                            <button type=\"button\" \r\n                                            className={this.state.action === CRUD_Actions.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"}\r\n                                            onClick={() => this.handleSaveUser()}\r\n                                            >{this.state.action === CRUD_Actions.EDIT ?\r\n                                                <FormattedMessage id=\"manage-user.edit\"/>\r\n                                                :\r\n                                                <FormattedMessage id=\"manage-user.save\"/>\r\n                                            }</button>\r\n                                        </div>                     \r\n                                    </div>        \r\n                                </form>            \r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <form>\r\n                                    <div class=\"form-group col-md-12\">\r\n                                        <TableManageUser\r\n                                        handleEditUserFromParentKey={this.handleEditUserFromParent}\r\n                                        action={this.state.action}\r\n                                        />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    </div>   \r\n                </div>\r\n                {this.state.isOpen == true && \r\n                <Lightbox\r\n                    mainSrc={this.state.previewImgURL}\r\n                    onCloseRequest = {() => this.setState({isOpen:false})}\r\n                    \r\n                />}\r\n            </div>\r\n        )\r\n    } \r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        genderRedux: state.admin.genders,\r\n        roleRedux: state.admin.roles,\r\n        positionRedux: state.admin.positions,\r\n        isLoadingGender: state.admin.isLoadingGender,\r\n        listUsers:state.admin.users\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getGenderStart: () => dispatch(actions.fetchGenderStart()),\r\n        getPositionStart: () => dispatch(actions.fetchPositionStart()),\r\n        getRoleStart: () => dispatch(actions.fetchRoleStart()),\r\n        createNewUser: (data) => dispatch(actions.createNewUser(data)),\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        editAUserRedux: (data) => dispatch(actions.EditAUser(data)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/ManageDoctor.js",["300","301","302","303","304","305","306","307"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from \"../../../store/actions\";\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\n//import style manually\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport './ManageDoctor.scss';\r\nimport Select from 'react-select';\r\nimport {LANGUAGES, CRUD_Actions} from '../../../utils';\r\nimport {getDetailInforDoctor} from \"../../../services/userService\"\r\n\r\nconst options = [\r\n    {value: 'chocolate', label: 'Chocolate'},\r\n    {value: 'strawberry', label:'Strawberry'},\r\n    {value:'vanilla', label:'Vanilla'},\r\n];\r\nconst mdParser = new MarkdownIt();\r\n\r\nclass ManageDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            doctorId:'',\r\n            contentMarkdown:'',\r\n            contentHTML:'',\r\n            selectedOption:'',\r\n            description:'',\r\n            listDoctors:[],\r\n            hasOldData: false,\r\n\r\n            listPrice:[],\r\n            listPayment: [],\r\n            listProvince: [],\r\n            listClinic: [],\r\n            listSpecialty: [],\r\n\r\n            selectedPrice: '',\r\n            selectedPayment: '',\r\n            selectedProvince: '',\r\n            selectedClinic: '',\r\n            selectedSpecialty: '',\r\n\r\n            nameClinic: '',\r\n            addressClinic: '',\r\n            note: '',\r\n            clinicId: '',\r\n            specialtyId: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.getAllRequiredDoctorInfor();\r\n    }\r\n\r\n    buildDataInputSelect = (inputData, type) => {\r\n        let result = [];\r\n        let {language} = this.props;\r\n        if(inputData && inputData.length > 0){\r\n            if(type ===\"USERS\"){\r\n                inputData.map((item, index)=>{\r\n                    let object = {};\r\n                    let labelVi = type === 'USERS' ? `${item.lastName} ${item.firstName}` : item.valueVI;\r\n                    let labelEn = type === 'USERS' ? `${item.firstName} ${item.lastName}` : item.valueEN;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            \r\n            if (type === 'PRICE'){\r\n                inputData.map((item, index)=>{\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVI}`;\r\n                    let labelEn = `${item.valueEN} USD`;\r\n                    object.label= language===LANGUAGES.VI ? labelVi: labelEn;\r\n                    object.value= item.keyMap;\r\n                    result.push(object)\r\n                })\r\n            }    \r\n            if(type === 'PAYMENT' || type === 'PROVINCE'){\r\n                inputData.map((item, index)=>{\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVI}`;\r\n                    let labelEn = `${item.valueEN}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi :  labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object)\r\n                })\r\n            }\r\n\r\n            if(type === \"SPECIALTY\"){\r\n                inputData.map((item, index)=> {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n\r\n            if (type === 'CLINIC') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.allDoctors !== this.props.allDoctors){\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\r\n            this.setState({\r\n                listDoctors:dataSelect\r\n            })\r\n        }\r\n\r\n        \r\n        if(prevProps.allRequiredDoctorInfor !== this.props.allRequiredDoctorInfor){\r\n            let {resPayment, resPrice, resProvince, resSpecialty, resClinic} = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment= this.buildDataInputSelect(resPayment,'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC');\r\n            console.log('data new: ', dataSelectPrice, dataSelectPayment, dataSelectProvince);\r\n\r\n            this.setState({\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic\r\n            })\r\n        }\r\n\r\n        if (prevProps.language !== this.props.language){\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS');\r\n            let {resPayment, resPrice, resProvince} = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment= this.buildDataInputSelect(resPayment,'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            this.setState({\r\n                listDoctors: dataSelect,\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n            })\r\n        }\r\n    }\r\n    handleEditorChange = ({html, text}) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html,\r\n        })\r\n    }\r\n    handleSaveContentMarkdown = () => {\r\n        let {hasOldData} = this.state;\r\n        this.props.saveDetailDoctors({\r\n            doctorId: this.state.selectedOption.value,\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            description:this.state.description,\r\n            doctorId: this.state.selectedOption.value,\r\n            action: hasOldData === true ? CRUD_Actions.EDIT : CRUD_Actions.CREATE,\r\n\r\n            selectedPrice: this.state.selectedPrice.value,\r\n            selectedPayment: this.state.selectedPayment.value,\r\n            selectedProvince: this.state.selectedProvince.value,\r\n            nameClinic: this.state.nameClinic,\r\n            addressClinic: this.state.addressClinic,\r\n            note: this.state.note,\r\n            clinicId: this.state.selectedClinic && this.state.selectedClinic.value ? this.state.selectedClinic.value : '',\r\n            specialtyId: this.state.selectedSpecialty.value ,\r\n            \r\n        });\r\n    }\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({selectedOption});\r\n        let {listPayment, listPrice, listProvince, listSpecialty, listClinic}= this.state;\r\n        let res = await getDetailInforDoctor(selectedOption.value);\r\n        if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n            let markdown = res.data.Markdown;\r\n            let addressClinic = '', nameClinic = '', note = '',\r\n            paymentId = '', priceId ='', provinceId = '', specialtyId ='',\r\n            selectedPayment = '', selectedPrice = '', selectedProvince = '', selectedSpecialty='', clinicId = '', selectedClinic='';\r\n\r\n            if (res.data.Doctor_Infor) {\r\n                addressClinic = res.data.Doctor_Infor.addressClinic;\r\n                nameClinic = res.data.Doctor_Infor.nameClinic;\r\n                note = res.data.Doctor_Infor.note;\r\n                paymentId = res.data.Doctor_Infor.paymentId;\r\n                priceId = res.data.Doctor_Infor.priceId;\r\n                provinceId = res.data.Doctor_Infor.provinceId;\r\n                specialtyId = res.data.Doctor_Infor.specialtyId;\r\n                clinicId = res.data.Doctor_Infor.clinicId;\r\n                selectedPayment = listPayment.find(item => {\r\n                    return item && item.value === paymentId\r\n                })\r\n                selectedPrice = listPrice.find(item => {\r\n                    return item && item.value === priceId\r\n                })\r\n                selectedProvince = listProvince.find(item => {\r\n                    return item && item.value === provinceId\r\n                })\r\n                selectedSpecialty = listSpecialty.find(item => {\r\n                    return item && item.value === specialtyId\r\n                })\r\n                selectedClinic = listClinic.find(item => {\r\n                    return item && item.value === clinicId\r\n                })\r\n            }\r\n            this.setState({\r\n                contentHTML: markdown.contentHTML,\r\n                contentMarkdown: markdown.contentMarkdown,\r\n                description: markdown.description,\r\n                hasOldData: true,\r\n                addressClinic: addressClinic,\r\n                nameClinic: nameClinic,\r\n                note: note,\r\n                selectedPayment: selectedPayment,\r\n                selectedPrice: selectedPrice,\r\n                selectedProvince: selectedProvince,\r\n                selectedSpecialty: selectedSpecialty,\r\n                selectedClinic: selectedClinic\r\n            })\r\n        } else {\r\n            this.setState({\r\n                contentHTML: '',\r\n                contentMarkdown:'',\r\n                description: '',\r\n                hasOldData:false,\r\n                addressClinic: '',\r\n                nameClinic: '',\r\n                note: '',\r\n                selectedPayment: '',\r\n                selectedPrice: '',\r\n                selectedProvince: '',\r\n                selectedSpecialty : '',\r\n                selectedClinic: ''\r\n            })\r\n        }\r\n    };\r\n    handleChangeSelectDoctorInfor = async(selectedOption, name) => {\r\n        let stateName = name.name;\r\n        let stateCopy = {...this.state};\r\n        stateCopy[stateName] = selectedOption;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleOnChangeText = (event, id)=> {\r\n        let stateCopy = {...this.state};\r\n        stateCopy[id] = event.target.value;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleOnChangeDesc = (event) => {\r\n        this.setState({description: event.target.value})\r\n    }\r\n    \r\n    render(){\r\n        let {hasOldData, listSpecialty} = this.state;\r\n        console.log('check state: ', this.state)\r\n        return(\r\n            \r\n                <div className=\"manage-doctor-container\">\r\n                    <div className=\"manage-doctor-title\">\r\n                        <FormattedMessage id=\"admin.manage-doctor.title\"/>\r\n                    </div>\r\n                    <div className=\"more-infor\">\r\n                        <div className=\"content-left form-group\">\r\n                            <label>< FormattedMessage id=\"admin.manage-doctor.select-doctor\"/></label>\r\n                            <Select\r\n                                value={this.state.selectedOption}\r\n                                onChange = {this.handleChangeSelect}\r\n                                options ={this.state.listDoctors}\r\n                                placeholder={<FormattedMessage id=\"admin.manage-doctor.select-doctor\"/>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"content-right\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.intro\"/></label>\r\n                            <textarea className=\"form-control\" rows=\"4\"\r\n                                onChange = {(event) =>this.handleOnChangeText(event, 'description')}\r\n                                value = {this.state.description}\r\n                                >\r\n                                </textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"more-infor-extra row\">\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.price\"/></label>\r\n                            <Select\r\n                                options={this.state.listPrice}\r\n                                placeholder={<FormattedMessage id=\"admin.manage-doctor.price\"/>}\r\n                                name = \"selectedPrice\"\r\n                                value={this.state.selectedPrice}\r\n                                onChange={this.handleChangeSelectDoctorInfor}\r\n                            />\r\n                            \r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.payment\"/></label>\r\n                            <Select\r\n                                options={this.state.listPayment}\r\n                                placeholder={<FormattedMessage id=\"admin.manage-doctor.payment\"/>}\r\n                                name = \"selectedPayment\"\r\n                                value={this.state.selectedPayment}\r\n                                onChange={this.handleChangeSelectDoctorInfor}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.province\"/></label>\r\n                            <Select\r\n                                options={this.state.listProvince}\r\n                                placeholder={<FormattedMessage id=\"admin.manage-doctor.province\"/>}\r\n                                value = {this.state.selectedProvince}\r\n                                onChange = {this.handleChangeSelectDoctorInfor}\r\n                                name = \"selectedProvince\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.nameClinic\"/></label>\r\n                            <input className=\"form-control\"\r\n                                onChange={(event) => this.handleOnChangeText(event, 'nameClinic')}\r\n                                value={this.state.nameClinic}\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.addressClinic\"/></label>\r\n                            <input className=\"form-control\"\r\n                                onChange={(event) => this.handleOnChangeText(event, 'addressClinic')}\r\n                                value={this.state.addressClinic}\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.note\"/></label>\r\n                            <input className=\"form-control\"\r\n                                onChange={(event) => this.handleOnChangeText(event, 'note')}\r\n                                value={this.state.note}\r\n                            ></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col-4 form-group'>\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.specialty\"/></label>\r\n                            <Select\r\n                                value = {this.state.selectedSpecialty}\r\n                                options = {this.state.listSpecialty}\r\n                                placeholder = {<FormattedMessage  id =\"admin.manage-doctor.specialty\"/>}\r\n                                onChange = {this.handleChangeSelectDoctorInfor}\r\n                                name=\"selectedSpecialty\"\r\n                            />\r\n                        </div>\r\n                        <div className='col-4 form-group'>\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.clinic\"/></label>\r\n                            <Select\r\n                                value = {this.state.selectedClinic}\r\n                                options = {this.state.listClinic}\r\n                                placeholder = {<FormattedMessage  id =\"admin.manage-doctor.clinic\"/>}\r\n                                onChange = {this.handleChangeSelectDoctorInfor}\r\n                                name=\"selectedClinic\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"manage-doctor-editor\">\r\n                        <MdEditor\r\n                            style={{height: '300px'}}\r\n                            renderHTML = {text => mdParser.render(text)}\r\n                            onChange = {this.handleEditorChange}\r\n                            value = {this.state.contentMarkdown}\r\n                        />\r\n                    </div>\r\n                    <button\r\n                    onClick = {() => this.handleSaveContentMarkdown()}\r\n                    className= {hasOldData === true ? \"save-content-doctor\": \"create-content-doctor\"}\r\n                    >{hasOldData === true ? \r\n                    <span><FormattedMessage id=\"admin.manage-doctor.save\"/></span> \r\n                    : \r\n                    <span><FormattedMessage id=\"admin.manage-doctor.add\"/></span>\r\n                    }\r\n                    </button>\r\n                </div>\r\n\r\n            \r\n        )\r\n    }\r\n}const mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allRequiredDoctorInfor: state.admin.allRequiredDoctorInfor,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        saveDetailDoctors: (data) => dispatch(actions.saveDetailDoctors(data)),\r\n        getAllRequiredDoctorInfor: () => dispatch(actions.getRequiredDoctorInfor()),\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/ManageSchedule.js",["308","309","310","311","312"],"import React, { Component } from 'react';\r\nimport{connect} from \"react-redux\";\r\nimport './ManageSchedule.scss';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Select from 'react-select';\r\nimport * as actions from \"../../../store/actions\";\r\nimport {CRUD_Actions, LANGUAGES, dateFormat} from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport {toast} from 'react-toastify'\r\nimport _ from 'lodash';\r\nimport {saveBulkScheduleDoctor} from '../../../services/userService';\r\n\r\nclass ManageSchedule extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listDoctors: [],\r\n            selectedDoctor: {},\r\n            currentDate:'',\r\n            rangeTime: [],\r\n            \r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTime();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.allDoctors !== this.props.allDoctors){\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime){\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0){\r\n                data = data.map(item => ({...item, isSelected:false}))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n    }\r\n\r\n    buildDataInputSelect=(inputData) => {\r\n        let result = [];\r\n        let {language} = this.props;\r\n        if(inputData && inputData.length > 0){\r\n            inputData.map((item, index) => {\r\n                let object = {};\r\n                let labelVi = `${item.lastName} ${item.firstName}`;\r\n                let labelEn = `${item.firstName} ${item.lastName}`;\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = item.id;\r\n                result.push(object);\r\n            })\r\n        }\r\n        return result;\r\n    }\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({selectedDoctor: selectedOption})\r\n    }\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        })\r\n    }\r\n\r\n    handleClickBtnTime = (time) => {\r\n        let {rangeTime} = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map(item => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            })\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSaveSchedule = async() => {\r\n        let {rangeTime, selectedDoctor, currentDate} = this.state;\r\n        let result = [];\r\n        if(!currentDate) {\r\n            toast.error('Invalid date!');\r\n            return;\r\n        }\r\n        if (selectedDoctor && _.isEmpty(selectedDoctor)){\r\n            toast.error('Invalid doctor!');\r\n            return;\r\n        }\r\n        // let formatedDate = moment(currentDate).format(dateFormat.SEND_TO_SERVER);\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        console.log('check:',formatedDate )\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter(item => item.isSelected=== true);\r\n            if(selectedTime && selectedTime.length > 0){\r\n                selectedTime.map((schedule, index) =>{\r\n                    let object = {};\r\n                    object.doctorId = selectedDoctor.value;\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }else {\r\n                toast.error('Invalid selected time!')\r\n                return;\r\n            }\r\n        }\r\n        let res = await saveBulkScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: selectedDoctor.value,\r\n            formatedDate: '' + formatedDate\r\n        })\r\n        if (res && res.errCode === 0){\r\n            toast.success(\"save infor succeed!\");\r\n        }else{\r\n            toast.error(\"error saveBulkScheduleDoctor\");\r\n            console.log(`error saveBulkScheduleDoctor >>> res:`, res)\r\n        }\r\n        console.log('check res: saveBulkScheduleDoctor', res)\r\n        console.log('check result:', result);\r\n    }\r\n\r\n    render() {\r\n        let {rangeTime} = this.state;\r\n        console.log('test manage-schedule', rangeTime)\r\n        let yesterday = new Date(new Date().setDate(new Date().getDate() -1));\r\n\r\n        let {language} = this.props;\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\"/>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-doctor\"/>\r\n                            </label>\r\n                            <Select\r\n                                value={this.state.selectedDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.listDoctors}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label><FormattedMessage id=\"manage-schedule.choose-date\"/></label>\r\n                            <DatePicker\r\n                                onChange = {this.handleOnchangeDatePicker}\r\n                                className =\"form-control\"\r\n                                value = {this.state.currentDate}\r\n                                minDate={yesterday}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                            rangeTime.map((item, index)=>{\r\n                                return(\r\n                                    <button className={item.isSelected === true ? \"btn btn-schedule active\" : \"btn btn-schedule\"} key={index}\r\n                                    onClick={() => this.handleClickBtnTime(item)}>\r\n                                        \r\n                                        {language === LANGUAGES.VI ? item.valueVI : item.valueEN}\r\n                                    </button>\r\n                                )\r\n                                \r\n                            })}\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-save-schedule\"\r\n                            onClick={() => this.handleSaveSchedule()}>\r\n                                <FormattedMessage id=\"manage-schedule.save\"/>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nconst mapStataeToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n    };\r\n};\r\nexport default connect(mapStataeToProps, mapDispatchToProps)(ManageSchedule);","/home/asus2/Frontend-React.JS-QuickStart/src/services/userService.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/index.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/utils/ToastUtil.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/utils/LanguageUtils.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/utils/KeyCodeUtils.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/utils/CommonUtils.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/utils/constant.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/axios.js",["313","314","315"],"import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true\r\n});\r\n\r\nconst createError = (httpStatusCode, statusCode, errorMessage, problems, errorCode = '') => {\r\n    const error = new Error();\r\n    error.httpStatusCode = httpStatusCode;\r\n    error.statusCode = statusCode;\r\n    error.errorMessage = errorMessage;\r\n    error.problems = problems;\r\n    error.errorCode = errorCode + \"\";\r\n    return error;\r\n};\r\n\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n        // Thrown error for request with OK status code\r\n        const { data } = response;\r\n        \r\n        return response.data;\r\n    }\r\n);\r\n\r\nexport default instance;\r\n","/home/asus2/Frontend-React.JS-QuickStart/src/components/Input/DatePicker.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/TableManageUser.js",["316","317"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../../store/actions\";\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\n//import style manually\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\n\r\nconst mdParser = new MarkdownIt();\r\nfunction handleEditorChange({html, text}){\r\n    console.log('handleEditorChange', html, text);\r\n}\r\nclass TableManageUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersRedux:[]\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchUserRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            this.setState({\r\n                usersRedux: this.props.listUsers\r\n            })\r\n        }\r\n    }\r\n    handleDeleteUser =(user) => {\r\n        this.props.deleteAUserRedux(user.id);\r\n    }\r\n\r\n    handleEditUser =(user) => {\r\n        this.props.handleEditUserFromParentKey(user)\r\n    }\r\n    render(){\r\n        let arrUsers = this.state.usersRedux;\r\n        return(\r\n            <React.Fragment>\r\n                <table id=\"TableManageUser\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Email</th>\r\n                            <th>First name</th>\r\n                            <th>Last name</th>\r\n                            <th>Address</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        {arrUsers && arrUsers.length > 0 && arrUsers.map((item,index)=>{{\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{item.email}</td>\r\n                                    <td>{item.firstName}</td>\r\n                                    <td>{item.lastName}</td>\r\n                                    <td>{item.address}</td>\r\n                                    <td>\r\n                                        <button className=\"btn-edit\" type=\"button\"\r\n                                        onClick={() => this.handleEditUser(item)}\r\n                                        ><i className=\"fas fa-pencil-alt\"></i></button>\r\n                                        <button onClick={()=> this.handleDeleteUser(item)}\r\n                                        type=\"button\"\r\n                                        className=\"btn-delete\"><i className=\"fas fa-trash\"></i></button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }})}\r\n                    </tbody>\r\n                </table>\r\n                <MdEditor style={{height:'500px'}} renderHTML={text => mdParser.render(text)} onchange={handleEditorChange}/>\r\n            </React.Fragment>\r\n            \r\n        )\r\n    }\r\n}const mapStateToProps = state => {\r\n    return {\r\n        listUsers: state.admin.users\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        deleteAUserRedux: (id) => dispatch(actions.deleteAUser(id))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);","/home/asus2/Frontend-React.JS-QuickStart/src/utils/emitter.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/ModalUserEdit.js",["318","319","320"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button,Modal,ModalFooter, ModalHeader, ModalBody } from 'reactstrap';\r\nimport {emitter} from '../../utils/emitter';\r\nimport _ from 'lodash'; //ham su li mang, object\r\nclass ModalManage extends Component {\r\n\r\n//props <-> properties ; nested\r\n   constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n            id: this.props.lastData.id,\r\n            email: this.props.lastData.email,\r\n            password:'',\r\n            firstName: this.props.lastData.firstName,\r\n            lastName: this.props.lastData.lastName,\r\n            address: this.props.lastData.address,\r\n       }\r\n   }\r\n\r\n    componentDidMount() {\r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParentEdit();\r\n    }\r\n\r\n    handleOnChageInput = (event, id) => {\r\n        let copyState = {...this.state};\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState      \r\n        });\r\n    }\r\n\r\n    checkValideInput = () => {\r\n        let isValid = true;\r\n        let arrInput = [ 'firstName','lastName','address'];\r\n        for(let i = 0; i < arrInput.length; i++) {\r\n            console.log('check loop',this.state[arrInput[i]], arrInput[i]);\r\n            if(!this.state[arrInput[i]]){\r\n                isValid = false;\r\n                alert('Missing parameter:' +arrInput[i]);\r\n                break;\r\n            }           \r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    handleUpdateUser = () => {\r\n        let isValid = this.checkValideInput();\r\n        if(isValid === true) {\r\n            this.props.EditUser(this.state);\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <Modal \r\n            isOpen={this.props.isOpenModalUserEdit}\r\n            toggle={()=>{this.toggle()}} \r\n            className={'modal-user-container'}\r\n            size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={()=>{this.toggle()}}>Edit User</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"modal-user-body\">\r\n                    <div className=\"input-container\">\r\n                        <label>Email</label>\r\n                        <input type=\"email\" \r\n                        value={this.state.email}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <label>Password</label>\r\n                        <input type=\"Password\"\r\n                        value={this.state.password} \r\n                        />\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <label>First Name</label>\r\n                        <input type=\"text\" onChange={(event) => {this.handleOnChageInput(event,\"firstName\")}}\r\n                        value={this.state.firstName}/>\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <label>Last Name</label>\r\n                        <input type=\"text\" onChange={(event) => {this.handleOnChageInput(event,\"lastName\")}}\r\n                        value={this.state.lastName}/>\r\n                    </div>\r\n                    <div className=\"input-container max-width-input\">\r\n                        <label>Address</label>\r\n                        <input type=\"text\" onChange={(event) => {this.handleOnChageInput(event,\"address\")}}\r\n                        value={this.state.address}/>\r\n                    </div>\r\n                    </div>\r\n                    \r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={()=>{this.handleUpdateUser()}}>Save Changes</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\"onClick={()=>{this.toggle()}}>cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalManage);\r\n","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/ModalUserDel.js",["321"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button,Modal,ModalFooter, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nclass ModalManage extends Component {\r\n    \r\n    componentDidMount() {\r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParent1();\r\n    }\r\n    handleDeleteUser1 = () => {       \r\n        this.props.handleDeleteUser();\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal \r\n            isOpen={this.props.isOpenModalUserDel}\r\n            toggle={()=>{this.toggle()}} \r\n            className={'modal-user-container'}\r\n            >\r\n                <ModalHeader toggle={()=>{this.toggle()}}>Cảnh Báo</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"modal-user-body\">\r\n                        <label>Bạn chắc chắn muốn xoá?</label>\r\n                    </div>\r\n                    \r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={()=>{this.handleDeleteUser1()}}>Xoá</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\"onClick={()=>{this.toggle()}}>cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalManage);\r\n  ","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/ModalUser.js",["322"],"\r\nimport React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button,Modal,ModalFooter, ModalHeader, ModalBody } from 'reactstrap';\r\nimport {emitter} from '../../utils/emitter';\r\nclass ModalManage extends Component {\r\n\r\n//props <-> properties ; nested\r\n   constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: ''\r\n       }\r\n       this.listenToEmitter();\r\n   }\r\n   listenToEmitter() {\r\n       //hứng event\r\n       emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n           //reset state\r\n           this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                address: ''\r\n           })\r\n       })\r\n   }\r\n    componentDidMount() {\r\n        \r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n\r\n    handleOnChageInput = (event, id) => {\r\n        //bad code( modify state truc tiep )\r\n        // this.state[id] = event.target.value;\r\n        // this.setState({\r\n        //     ...this.state,\r\n        // }, () => {\r\n        //     console.log('check bab state:', this.state)\r\n        // })\r\n        //good code\r\n        let copyState = {...this.state};\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState      \r\n        });\r\n    }\r\n// typo : viet sai\r\n    checkValideInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName','lastName','address'];\r\n        for(let i = 0; i < arrInput.length; i++) {\r\n            console.log('check loop',this.state[arrInput[i]], arrInput[i]);\r\n            if(!this.state[arrInput[i]]){\r\n                isValid = false;\r\n                alert('Missing parameter:' +arrInput[i]);\r\n                break;\r\n            }           \r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValideInput();\r\n        if(isValid === true) {\r\n            // call api create modal\r\n            this.props.createNewUser(this.state);\r\n            console.log('data modal', this.state);\r\n        }\r\n    }\r\n    render() {\r\n        // console.log('check child props', this.props)\r\n        // console.log('check ', this.props.isOpenModalUser)\r\n        return (\r\n            <Modal \r\n            isOpen={this.props.isOpenModalUser}\r\n            toggle={()=>{this.toggle()}} \r\n            className={'modal-user-container'}\r\n            size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={()=>{this.toggle()}}>Create a new user</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"modal-user-body\">\r\n                    <div className=\"input-container\">\r\n                        <label>Email</label>\r\n                        <input type=\"email\" onChange={(event) => {this.handleOnChageInput(event,\"email\")}}\r\n                        value={this.state.email}/>\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <label>Password</label>\r\n                        <input type=\"Password\" onChange={(event) => {this.handleOnChageInput(event,\"password\")}}\r\n                        value={this.state.passwordw}/>\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <label>First Name</label>\r\n                        <input type=\"text\" onChange={(event) => {this.handleOnChageInput(event,\"firstName\")}}\r\n                        value={this.state.firstName}/>\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <label>Last Name</label>\r\n                        <input type=\"text\" onChange={(event) => {this.handleOnChageInput(event,\"lastName\")}}\r\n                        value={this.state.lastName}/>\r\n                    </div>\r\n                    <div className=\"input-container max-width-input\">\r\n                        <label>Address</label>\r\n                        <input type=\"text\" onChange={(event) => {this.handleOnChageInput(event,\"address\")}}\r\n                        value={this.state.address}/>\r\n                    </div>\r\n                    </div>\r\n                    \r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={()=>{this.handleAddNewUser()}}>Save Changes</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\"onClick={()=>{this.toggle()}}>cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalManage);\r\n","/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/adminActions.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/userActions.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/appActions.js",[],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DoctorSchedule.js",["323"],"import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport './DoctorSchedule.scss';\nimport moment from 'moment';\nimport localization from 'moment/locale/vi';\nimport {LANGUAGES} from '../../../utils';\nimport {getScheduleDoctorByDate} from '../../../services/userService';\nimport {FormattedMessage} from 'react-intl';\nimport BookingModal from './Modal/BookingModal';\n\nclass DoctorSchedule extends Component {\n    constructor(props){\n        super(props);\n            this.state = {\n                allDays: [],\n                allAvalableTime: [],\n                isOpenModalBooking: false,\n                dataScheduleTimeModal: {}\n            }\n    }\n    async componentDidMount() {\n        let {language} = this.props;  \n        let allDays = this.getArrDays(language);\n\n        if (this.props.doctorIdFromParent){\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\n            this.setState({\n                allAvalableTime: res.data ? res.data : []   \n            })\n        }\n        this.setState({\n            allDays: allDays,  \n        })      \n    }\n    capitalizeFirstLetter(string){\n        return string.charAt(0).toUpperCase()+ string.slice(1);\n    }\n    getArrDays = (language) => {\n        let allDays = []\n        for (let i = 0; i<7; i++) {\n            let object = {};\n            if (language === LANGUAGES.VI){\n            \n                if(i===0){\n                    let ddMM = moment(new Date()).format('DD/MM');\n                    let today = `Hom nay -${ddMM}`;\n                    object.label = today;\n                }else {\n                    let lableVi = moment(new Date()).add(i, 'days').format('ddd - DD/MM')\n                    object.label = this.capitalizeFirstLetter(lableVi)\n                }\n\n            }else{\n                if (i === 0){\n                    let ddMM = moment(new Date()).format('DD/MM');\n                    let today = `Today - ${ddMM}`;\n                    object.label = today;\n                } else{\n                    object.label = moment(new Date()).add(i, 'days').locale('en').format(\"ddd - DD/MM\");\n                }\n                \n            }\n            object.value = moment(new Date()).add(i, 'days').startOf('day').valueOf();\n            allDays.push(object);\n        }\n        return allDays;\n        \n    }\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if(this.props.language !== prevProps.language) {\n            let allDays = this.getArrDays(this.props.language);\n            this.setState({\n                allDays: allDays\n            })\n        }\n        if(this.props.doctorIdFromParent !== prevProps.doctorIdFromParent){\n            let allDays = this.getArrDays(this.props.language);\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\n            this.setState({\n                allAvalableTime: res.data ? res.data : []\n            })\n        }\n    }\n    handleOnChangeSelect = async (event) => {\n        if (this.props.doctorIdFromParent && this.props.doctorIdFromParent !== -1){\n            let doctorId = this.props.doctorIdFromParent;\n            let date = event.target.value;\n            let res = await getScheduleDoctorByDate(doctorId, date);\n            \n\n            if (res && res.errCode === 0){\n                this.setState({\n                    allAvalableTime: res.data ? res.data : []\n                })\n            }\n            console.log('check res schedule from react: ', this.state.allAvalableTime)\n        }\n    }\n\n    handleClickScheduleTime = (time) => {\n        this.setState({\n            isOpenModalBooking: true,\n            dataScheduleTimeModal: time\n        })\n        console.log(`check time:`, time)\n    }\n\n    closeBookingClose = () => {\n        this.setState({\n            isOpenModalBooking: false\n        })\n    }\n    render() {\n        let {allDays, allAvalableTime, isOpenModalBooking, dataScheduleTimeModal} = this.state;\n        let {language} = this.props;\n        return(\n            <>\n                <div className=\"doctor-schedule-container\">\n                    <div className=\"all-schedule\">\n                        <select onChange={(event) => this.handleOnChangeSelect(event)}>\n                            {allDays && allDays.length > 0 &&\n                                allDays.map((item, index) =>{\n                                    return(\n                                        <option\n                                            value={item.value}\n                                            key={index}\n                                        >\n                                            {item.label}\n                                        </option>\n                                    )\n                                })}\n                        </select>\n                    </div>\n                    <div className=\"all-available-time\">\n                        <div className=\"text-calendar\">\n                            <i className=\"fas fa-calendar-alt\"><span><FormattedMessage id=\"patient.detail-doctor.schedule\"/></span></i>\n                        </div>\n                        <div className=\"time-content\">\n                            {allAvalableTime && allAvalableTime.length > 0 ?\n                                <>\n                                    <div className=\"time-content-btns\">\n                                        {allAvalableTime.map((item, index) => {\n                                            let timeDisplay = language === LANGUAGES.VI ?\n                                                item.timeTypeData.valueVi : item.timeTypeData.valueEn;\n                                            return(\n                                                <button key={index}\n                                                    className={language === LANGUAGES.VI ? 'btn-vie' : 'btn-en'}\n                                                    onClick={()=> this.handleClickScheduleTime(item)}\n                                                    >\n                                                    {timeDisplay}\n                                                </button>\n                                            )\n                                        })}\n                                    </div>\n                                    <div className=\"book-free\">\n                                        <span>\n                                            <FormattedMessage id=\"patient.detail-doctor.choose\"/>\n                                            <i className=\"fas fa-hand-point-up\"></i>\n                                            <FormattedMessage id =\"patient.detail-doctor.book-free\"/>\n                                        </span>\n                                    </div>\n                                </>\n                                :\n                                <div className=\"no-schedule\">\n                                    <FormattedMessage id=\"patient.detail-doctor.no-schedule\"/>\n                                </div>\n\n                                \n                            }\n                        </div>\n                    </div>\n                </div>\n                <BookingModal\n                    isOpenModal={isOpenModalBooking}\n                    closeBookingClose= {this.closeBookingClose}\n                    dataTime= {dataScheduleTimeModal}\n                />    \n            </>\n            \n        );\n    }\n    \n}\nconst mapStateToProps = state => {\n    return{\n        language: state.app.language,\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return{};\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorSchedule);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DoctorExtraInfor.js",["324"],"import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport './DoctorExtraInfor.scss';\nimport {LANGUAGES} from '../../../utils';\nimport { getScheduleDoctorByDate } from '../../../services/userService';\nimport { FormattedMessage } from 'react-intl';\nimport {getExtraInforDoctorById} from '../../../services/userService';\nimport NumberFormat from 'react-number-format';\n\nclass DoctorExtraInfor extends Component {\n    constructor(props){\n        super(props);\n        this.state= {\n            isShowDetailInfor : false,\n            extraInfor: {}\n        }\n    }\n    async componentDidMount(){\n        if(this.props.doctorIdFromParent){\n            let res = await getExtraInforDoctorById(this.props.doctorIdFromParent);\n            if (res && res.errCode === 0){\n                this.setState({\n                    extraInfor: res.data\n                })\n            }\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent){\n            let res = await getExtraInforDoctorById(this.props.doctorIdFromParent);\n            if (res && res.errCode === 0){\n                this.setState({\n                    extraInfor: res.data\n                })\n                console.log('check res:', res.data)\n            }\n        }\n    }\n    showHideDetalInfor = (status) => {\n        this.setState({\n            isShowDetailInfor: status\n        })\n    }\n    render(){\n        let {isShowDetailInfor, extraInfor} = this.state;\n        let {language} = this.props;\n        console.log('check state:', this.state)\n        return(\n            <div className=\"doctor-extra-infor-container\">\n                <div className=\"content-up\">\n                    <div className=\"text-address\"><FormattedMessage id = \"patient.extra-infor-doctor.text-address\"/></div>\n                    <div className=\"name-clinic\">\n                        {extraInfor && extraInfor.nameClinic ? extraInfor.nameClinic : ''}\n                      </div>\n                    <div className=\"detail-address\">{extraInfor && extraInfor.addressClinic ? extraInfor.addressClinic : ''}</div>\n                </div>\n                <div className = \"content-down\">\n                    {isShowDetailInfor === false &&\n                        <div className=\"short-infor\">\n                            <FormattedMessage id = \"patient.extra-infor-doctor.price\"/>\n                            {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.VI \n                            &&\n                            <NumberFormat \n                                className=\"currency\"\n                                value={extraInfor.priceTypeData.valueVi}\n                                displayType={'text'}\n                                thousandSeparator = {true}\n                                suffix = {'VND'}\n                                />\n                            }\n                            {extraInfor && extraInfor.priceTypeDate && language === LANGUAGES.EN \n                            &&\n                            <NumberFormat \n                                className=\"currency\"\n                                value={extraInfor.priceTypeData.valueEn}\n                                displayType={'text'}\n                                thousandSeparator = {true}\n                                suffix = {'$'}\n                                />\n                            }\n                            <span className=\"detail\" onClick={() => this.showHideDetalInfor(true)}>\n                                <FormattedMessage id= \"patient.extra-infor-doctor.detail\"/>\n                            </span>\n                        </div>\n                    }\n                    {isShowDetailInfor === true &&\n                        <>\n                            <div className=\"title-price\"> <FormattedMessage id= \"patient.extra-infor-doctor.price\"/> </div>\n                            <div className=\"detail-infor\">\n                                <div className=\"price\">\n                                    <span className=\"left\"> <FormattedMessage id= \"patient.extra-infor-doctor.price\"/></span> \n                                    <span className=\"right\">\n                                        {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.VI \n                                        &&\n                                        <NumberFormat \n                                            className=\"currency\"\n                                            value={extraInfor.priceTypeData.valueVi}\n                                            displayType={'text'}\n                                            thousandSeparator = {true}\n                                            suffix = {'VND'}\n                                            />\n                                        }\n                                        {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.EN \n                                        &&\n                                        <NumberFormat \n                                            className=\"currency\"\n                                            value={extraInfor.priceTypeData.valueEn}\n                                            displayType={'text'}\n                                            thousandSeparator = {true}\n                                            suffix = {'$'}\n                                            />\n                                        }    \n                                    </span> \n                                </div>\n                                <div className=\"note\">\n                                    {extraInfor && extraInfor.note ? extraInfor.note : ''}\n                                </div>\n                            </div>\n                            <div className=\"payment\">\n                                <FormattedMessage id= \"patient.extra-infor-doctor.payment\"/>\n                                    {extraInfor && extraInfor.paymentTypeData && language === LANGUAGES.VI ? extraInfor.paymentTypeData.valueVi : ''} \n                                    {extraInfor && extraInfor.paymentTypeData && language === LANGUAGES.EN ? extraInfor.paymentTypeData.valueEn : ''} \n                            </div>\n                            <div className=\"hide-price\">\n                                <span onClick={() => this.showHideDetalInfor(false)}><FormattedMessage id= \"patient.extra-infor-doctor.hide-price\"/></span>\n                            </div>\n                        </>\n                    }\n            </div>\n            </div>\n        )\n        \n    }\n}\nconst mapStateToProps = state => {\n    return {\n        language: state.app.language\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorExtraInfor);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/Modal/BookingModal.js",["325"],"import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './BookingModal.scss';\nimport {Modal} from 'reactstrap';\nimport ProfileDoctor from '../ProfileDoctor';\nimport _ from 'lodash';\nimport DatePicker from '../../../../components/Input/DatePicker';\nimport * as actions from '../../../../store/actions';\nimport {LANGUAGES} from '../../../../utils';\nimport Select from 'react-select';\nimport {postPatientBookAppointment} from '../../../../services/userService';\nimport {toast} from \"react-toastify\";\nimport moment from \"moment\";\n\nclass BookingModal extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            fullName: '',\n            phoneNumber: '',\n            email:'',\n            reason:'',\n            birthday:'',\n            selectedGender:'',\n            doctorId:'',\n            genders:'',\n            timeType:'',\n        }\n    }\n    async componentDidMount(){\n        this.props.getGenders();\n    }\n\n    buildDataGender = (data) => {\n        let result = [];\n        let language = this.props.language;\n        if(data && data.length > 0){\n            data.map(item => {\n                let object = {};\n                object.label = language === LANGUAGES.VI ? item.valueVI : item.valueEN;\n                object.value = item.keyMap;\n                result.push(object)\n            })\n        }\n        return result;\n    }\n\n    buildTimeBooking = (dataTime) => {\n        let {language} = this.props;\n        if (dataTime && !_.isEmpty(dataTime)){\n            let time = language === LANGUAGES.VI ?\n                dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\n            let date = language === LANGUAGES.VI ?\n                moment.unix(+dataTime.date /1000).format('dddd- DD/MM/YYYY')\n                :\n                moment.unix(+dataTime/1000).locale('en').format('ddd - MM/DD/YYYY');\n            return `${time} - ${date}`    \n\n        }\n        return ''\n    }\n\n    buildDoctorName = (dataTime) => {\n        let {language} = this.props;\n        if(dataTime && !_.isEmpty(dataTime)){\n            let name = language === LANGUAGES.VI ?\n                `${dataTime.doctorData.lastName} ${dataTime.doctorData.firstName}`\n                :\n                `${dataTime.doctorData.firstName} ${dataTime.doctorData.lastName}`\n            return name;\n\n        }\n        return ''\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n            this.setState({\n                genders:this.buildDataGender(this.props.genders)\n            })\n        }\n        if (this.props.genders !== prevProps.genders){\n            this.setState({\n                genders: this.buildDataGender(this.props.genders)\n            })\n        }\n        if(this.props.dataTime !== prevProps.dataTime){\n            if(this.props.dataTime && !_.isEmpty(this.props.dataTime)){\n                let doctorId = this.props.dataTime.doctorId;\n                let timeType = this.props.dataTime.timeType;\n                this.setState({\n                    doctorId: doctorId,\n                    timeType: timeType\n                })\n            }\n        }\n    }\n\n    handleOnchangeInput = (event, id) =>  {\n        let valueInput = event.target.value;\n        let stateCopy = {...this.state};\n        stateCopy[id] = valueInput;\n        this.setState({\n            ...stateCopy\n        })\n    }\n\n    handleOnchangeDatePicker = (date) => {\n        this.setState({\n            birthday: date[0]\n        })\n    }\n    handleChangeSelect = (selectedOption) => {\n        this.setState({selectedGender: selectedOption});\n    }\n    handleConfirmBooking = async () => {\n        let date = new Date(this.state.birthday).getTime();\n        let timeString = this.buildTimeBooking(this.props.dataTime);\n        let doctorName = this.buildDoctorName(this.props.dataTime);\n        let res = await postPatientBookAppointment({\n            fullName: this.state.fullName,\n            phoneNumber: this.state.phoneNumber,\n            email: this.state.email,\n            address: this.state.address,\n            reason: this.state.reason,\n            date: this.props.dataTime.date,\n            birthday: date,\n            selectedGender: this.state.selectedGender.value,\n            doctorId: this.state.doctorId,\n            timeType: this.state.timeType,\n            language: this.props.language,\n            timeString: timeString,\n            doctorName: doctorName\n        })\n        if(res && res.errCode === 0){\n            toast.success('Booking a new appointment succeed!')\n            this.props.closeBookingClose();\n        }else {\n            toast.error('Booking a new appointment error!')\n            console.log(res)\n        }\n    }\n    render(){\n        //toggle={}\n        let {isOpenModal, closeBookingClose, dataTime} = this.props;\n        let doctorId = '';\n        if (dataTime && !_.isEmpty(dataTime)){\n            doctorId = dataTime.doctorId\n        }\n        console.log('check datatime:', this.state);\n        return (\n            <Modal\n                isOpen={isOpenModal}\n                className={'booking-modal-container'}\n                size=\"lg\"\n                centered\n                //backdrop={true}\n            >\n                <div className=\"booking-modal-content\">\n                    <div className=\"booking-modal-header\">\n                        <span className=\"left\"><FormattedMessage id=\"patient.booking-modal.title\"/></span>\n                        <span \n                            className=\"right\"\n                            onClick={closeBookingClose}\n                        ><i className=\"fas fa-times\"></i></span>    \n                    </div>\n                    <div className=\"booking-modal-body\">\n                        <div className=\"doctor-infor\">\n                            <ProfileDoctor\n                                doctorId = {doctorId}\n                                isShowDescriptionDoctor={false}\n                                dataTime={dataTime}\n                            />    \n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-6 form-group\">\n                                <label><FormattedMessage id=\"patient.booking-modal.fullName\"/></label>\n                                <input className=\"form-control\"\n                                value={this.state.fullName}\n                                onChange={(event) => this.handleOnchangeInput(event, 'fullName')}/>\n                            </div>\n                            <div className=\"col-6 form-group\">\n                                <label><FormattedMessage id=\"patient.booking-modal.phoneNumber\"/></label>\n                                <input className=\"form-control\"\n                                value={this.state.phoneNumber}\n                                onChange={(event) => this.handleOnchangeInput(event, 'phoneNumber')}/>\n                            </div>\n                            <div className=\"col-6 form-group\">\n                                <label><FormattedMessage id=\"patient.booking-modal.email\"/></label>\n                                <input className=\"form-control\"\n                                value={this.state.email}\n                                onChange={(event) => this.handleOnchangeInput(event, 'email')}/>\n                            </div>\n                            <div className=\"col-6 form-group\">\n                                <label><FormattedMessage id=\"patient.booking-modal.address\"/></label>\n                                <input className=\"form-control\"\n                                value={this.state.address}\n                                onChange={(event) => this.handleOnchangeInput(event, 'address')}/>\n                            </div>\n                            <div className=\"col-12 form-group\">\n                                <label><FormattedMessage id=\"patient.booking-modal.reason\"/></label>\n                                <input className=\"form-control\"\n                                value={this.state.reason}\n                                onChange={(event) => this.handleOnchangeInput(event, 'reason')}/>\n                            </div>\n                            <div className=\"col-6 form-group\">\n                                <label><FormattedMessage id=\"patient.booking-modal.birthday\"/></label>\n                                <DatePicker\n                                    onChange={this.handleOnchangeDatePicker}\n                                    className=\"form-control\"\n                                    value={this.state.birthday}\n                                />    \n                            </div>\n                            <div className=\"col-6 form-group\">\n                                <label><FormattedMessage id=\"patient.booking-modal.gender\"/></label>\n                                <Select\n                                    value={this.state.selectedGender}\n                                    onChange={this.handleChangeSelect}\n                                    options={this.state.genders}\n                                />    \n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"booking-modal-footer\">\n                        <button className=\"btn-booking-confirm\"\n                            onClick={() => this.handleConfirmBooking()}>\n                                <FormattedMessage id=\"patient.booking-modal.btnConfirm\"/>\n                            </button>\n                        <button className=\"btn-booking-cancel\"\n                            onClick={closeBookingClose}\n                        ><FormattedMessage id=\"patient.booking-modal.btnCancel\"/></button>    \n                    </div>\n                </div>\n            </Modal>    \n        )\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        getGenders: () => dispatch(actions.fetchGenderStart()),\n    };\n};\nconst mapStateToProps = state => {\n    return {\n        language: state.app.language,\n        genders: state.admin.genders,\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModal);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/ProfileDoctor.js",["326"],"import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './ProfileDoctor.scss';\nimport { getProfileDoctorById } from \"../../../services/userService\";\nimport {LANGUAGES} from '../../../utils';\nimport NumberFormat from \"react-number-format\";\nimport _ from 'lodash';\nimport moment from 'moment';\nimport {Link, link} from 'react-router-dom';\n\nclass ProfileDoctor extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            dataProfile: {}\n        }\n    }\n\n    async componentDidMount() {\n        let data = await this.getInforDoctor(this.props.doctorId);\n        this.setState({\n            dataProfile: data\n        }) \n    }\n\n    getInforDoctor = async (id) => {\n        let result = {};\n        if (id) {\n            let res = await getProfileDoctorById(id);\n            if (res && res.errCode === 0){\n                result = res.data;\n            }else{\n                console.log('gid',res.errCode)\n            }\n        }\n\n        return result;\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n        if (this.props.doctorId !== prevProps.doctorId){\n            \n        }\n    }\n\n    renderTimeBooking = (dataTime) => {\n        let {language} = this.props;\n        if (dataTime && !_.isEmpty(dataTime)){\n            let time = language === LANGUAGES.VI ?\n                dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\n            let date = language === LANGUAGES.VI ?\n                moment.unix(+dataTime.date/1000).format('dddd - DD/MM/YYYY')\n                :\n                moment.unix(+dataTime.date/1000).locale('en').format('ddd = MM/DD/YYYY')\n            return(\n                <>\n                    <div>{time} - {date}</div>\n                    <div><FormattedMessage id=\"patient.booking-modal.priceBooking\"/></div>\n                </>\n            )\n        }\n        return <></>\n    }\n\n    render(){\n        let {dataProfile} = this.state;\n        let {language, isShowDescriptionDoctor, dataTime, isShowPrice, isShowLinkDetail, doctorId} = this.props;\n        console.log('check state profile:', this.state)\n\n        let nameVi = '', nameEn = '';\n        if  (dataProfile && dataProfile.positionData){\n            nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName}`\n            nameEn = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`\n        }\n        return(\n            <div className=\"profile-doctor-container\">\n                <div className=\"intro-doctor\">\n                    <div\n                        className=\"content-left\"\n                        style={{backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})`}}>\n                    </div>\n                    <div className=\"content-right\">\n                        <div className=\"up\">\n                            {language === LANGUAGES.VI ? nameVi : nameEn}\n                        </div>\n                        <div className=\"down\">\n                            {isShowDescriptionDoctor === true ?\n                                <>\n                                    {dataProfile && dataProfile.Markdown\n                                    && dataProfile.Markdown.description\n                                    &&\n                                    <span>\n                                        {dataProfile.Markdown.description}\n                                    </span>\n                                    }\n                                </>\n                                :\n                                <>\n                                    {this.renderTimeBooking(dataTime)}\n                                </>\n                            }\n                            \n                        </div>\n                    </div>\n                    \n                </div>\n                {isShowLinkDetail === true &&\n                    <div className=\"view-detail-doctor\">\n                        <Link to={`/detail-doctor/${doctorId}`}>Xem them</Link>\n                    </div>\n                }\n                {isShowPrice === true &&\n                    <div className=\"price\">\n                    <FormattedMessage id=\"patient.booking-modal.price\"/>\n                    {dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.VI &&\n                        <NumberFormat \n                            className=\"currency\"\n                            value={dataProfile.Doctor_infor.priceTypeData.valueVi}\n                            displayType={'text'}\n                            thousandSeparator = {true}\n                            suffix = {'VND'}\n                        />\n                    }\n                    {dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.EN &&\n                        <NumberFormat \n                            className=\"currency\"\n                            value={dataProfile.Doctor_infor.priceTypeData.valueEn}\n                            displayType={'text'}\n                            thousandSeparator = {true}\n                            suffix = {'$'}\n                        />\n                    }\n                </div>\n                }\n                \n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        language: state.app.language\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/VerifyEmail.js",["327","328"],"import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport { postPatientBookAppointment, postVerifyBookingAppointment } from \"../../services/userService\";\nimport HeaderHome from \"../HomePage/HeaderHome\";\nimport './VerifyEmail.scss';\n\nclass VerifyEmail extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            statusVerify: false,\n            errCode: 0\n        }\n    }\n\n    async componentDidMount(){\n        if(this.props.location && this.props.location.search){\n            let urlParams = new URLSearchParams(this.props.location.search);\n            let token = urlParams.get('token');\n            let doctorId = urlParams.get('doctorId');\n            let res = await postVerifyBookingAppointment({\n                token: token,\n                doctorId: doctorId\n            })\n\n            if(res && res.errCode=== 0){\n                this.setState({\n                    statusVerify: true,\n                    errCode: res.errCode\n                })\n            }else {\n                this.setState({\n                    statusVerify: true,\n                    errCode: res && res.errCode ? res.errCode : -1\n                })\n            }\n        }\n    }\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if(this.props.language !== prevProps.language){\n\n        }\n    }\n    \n    render() {\n        let {statusVerify, errCode} = this.state;\n        console.log('check state email', this.state)\n        return(\n            <>\n                <HeaderHome/>\n                <div className=\"verify-email-container\">\n                    {statusVerify === false ?\n                        <div>Loading data ...</div>\n                        :\n                        <div>\n                            {+errCode === 0 ?\n                                <div className=\"infor-booking\">Xac nhan lich hen thanh cong</div>  :  \n                                <div className=\"infor-booking\">Lich hen khong ton tai</div>    \n                            }\n                        </div>\n                    }\n                </div>\n            </>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VerifyEmail);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Specialty/ManageSpecialty.js",["329","330"],"import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './ManageSpecialty.scss';\nimport MarkdownIt from \"markdown-it\";\nimport MdEditor from 'react-markdown-editor-lite';\nimport{CommonUtils, commouUtils} from '../../../utils';\nimport {createNewSpecialty} from '../../../services/userService';\nimport {toast} from \"react-toastify\";\n\nconst mdParser = new MarkdownIt();\n\nclass ManageSpecialty extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            name: '',\n            imageBase64: '',\n            descriptionHTML: '',\n            descriptionMarkdown: '',\n        }\n    }\n\n    async componentDidMount(){\n\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n    }\n\n    handleOnchangeInput = (event, id) => {\n        let stateCopy = {...this.state}\n        stateCopy[id] = event.target.value;\n        this.setState({\n            ...stateCopy\n        })\n    }\n\n    handleEditorChange = ({html, text}) => {\n        this.setState({\n            descriptionHTML: html,\n            descriptionMarkdown: text,\n        })\n    }\n\n    handleOnchangeImage = async(event) => {\n        let data = event.target.files;\n        let file = data[0];\n        if (file) {\n            let base64 = await CommonUtils.getBase64(file);\n            this.setState({\n                imageBase64: base64\n            })\n        }\n    }\n\n    handleSaveNewSpecialty = async () => {\n        let res = await createNewSpecialty(this.state)\n        if (res && res.errCode === 0){\n            toast.success('add new specialty succeeds')\n            this.setState({\n                name: '',\n                imageBase64: '',\n                descriptionHTML: '',\n                descriptionMarkdown: '',\n            })\n        }else {\n            toast.error('Something wrongs...')\n            console.log(res)\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"manage-specialty-container\">\n                <div className=\"ms-title\">\n                    Quan ly chuyen khoa\n                </div>\n                <div className=\"add-new-specialty row\">\n                <div className=\"col-6 form-group\">\n                        <label>Ten chuyen nghanh</label>\n                        <input className=\"form-control\" type=\"text\" value={this.state.name}\n                            onChange={(event) => this.handleOnchangeInput(event, 'name')}/>\n                    </div>\n                    <div className=\"col-6 form-group\">\n                        <label>Anh chuyen khoa</label>\n                        <input className=\"form-control\" type=\"file\"\n                            onChange={(event) => this.handleOnchangeImage(event)}/>\n                    </div>\n                    <div className=\"col-12\">\n                        <MdEditor\n                            style={{height: '300px'}}\n                            renderHTML= {text => mdParser.render(text)}\n                            onChange={this.handleEditorChange}\n                            value={this.state.descriptionMarkdown}\n                        />\n                    </div>\n                    <div className=\"col-12\">\n                        <button className=\"btn-save-specialty\"\n                            onClick={() => this.handleSaveNewSpecialty()}>\n                                Save\n                            </button>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        language: state.app.language,\n\n    };\n};\nconst mapDispatchToProps = dispath => {\n    return {};\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSpecialty);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Specialty/DetailSpecialty.js",["331","332","333"],"import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './DetailSpecialty.scss';\nimport HomeHeader from '../../HomePage/HeaderHome';\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\nimport DoctorExtraInfor from \"../Doctor/DoctorExtraInfor\";\nimport ProfileDoctor from \"../Doctor/ProfileDoctor\";\nimport {getAllDetailSpecialtyById, getAllCodeService} from '../../../services/userService';\nimport _ from 'lodash';\nimport {LANGUAGES} from '../../../utils';\n\nclass DetailSpecialty extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            arrDoctorId: [],\n            dataDetailSpecialty: {},\n            listProvince: []\n        }\n    }\n\n    async componentDidMount(){\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id;\n\n            let res = await getAllDetailSpecialtyById({\n                id: id,\n                location: 'ALL'\n            });\n            console.log('hihi', res)\n            let resProvince = await  getAllCodeService('PROVINCE');\n            if (res && res.errCode === 0 && resProvince && resProvince.errCode === 0){\n                let data = res.data;\n                let arrDoctorId= [];\n                if (data && !_.isEmpty(res.data)){\n                    let arr = data.doctorSpecialty;\n                    if (arr && arr.length > 0){\n                        arr.map(item => {\n                            arrDoctorId.push(item.doctorId)\n                        })\n                    }\n                }\n                let dataProvince = resProvince.data;\n                if (dataProvince && dataProvince.length > 0) {\n                    dataProvince.unshift({\n                        createAt: null,\n                        keyMap: \"ALL\",\n                        type: \"PROVINCE\",\n                        valueEN: \"ALL\",\n                        valueVI: \"Toan quoc\",\n                    })\n                }\n\n                this.setState({\n                    dataDetailSpecialty: res.data,\n                    arrDoctorId : arrDoctorId,\n                    listProvince: resProvince ? dataProvince : []\n                })\n            }\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n    }\n\n    handleOnchangeSelect =  async(event) => {\n        console.log('check onchange:', event.target.value)\n        if (this.props.match && this.props.match.params && this.props.match.params.id){\n            let id = this.props.match.params.id;\n            let location = event.target.value;\n\n            let res = await getAllDetailSpecialtyById({\n                id: id,\n                location: location\n            });\n\n            if (res && res.errCode === 0) {\n                let data = res.data;\n                let arrDoctorId = [];\n                if (data && !_.isEmpty(res.data)) {\n                    let arr = data.doctorSpecialty;\n                    if (arr && arr.length > 0){\n                        arr.map(item => {\n                            arrDoctorId.push(item.doctorId)\n                        })\n                    }\n                }\n                this.setState({\n                    dataDetailSpecialty: res.data,\n                    arrDoctorId: arrDoctorId,\n                })\n            }\n        }\n    }\n\n    render(){\n        let {arrDoctorId, dataDetailSpecialty, listProvince} = this.state;\n        console.log('check state', this.state)\n        let {language} = this.props;\n        return(\n            <div className=\"detail-specialty-container\">\n                <HomeHeader />\n                <div className=\"detail-specialty-body\">\n                    <div className=\"description-spcialty\">\n                        {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty)\n                        &&\n                        <div dangerouslySetInnerHTML={{__html: dataDetailSpecialty.descriptionHTML}}>\n\n                        </div>\n                        }\n                    </div>\n                    <div className=\"search-sp-doctor\">\n                        <select onChange = {(event) => this.handleOnchangeSelect(event)}>\n                            {listProvince && listProvince.length > 0 &&\n                            listProvince.map((item, index) => {\n                                return(\n                                    <option key={index} value= {item.keyMap}>\n                                        {language === LANGUAGES.VI ? item.valueVI : item.valueEN}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </div>\n                    {arrDoctorId && arrDoctorId.length > 0 &&\n                        arrDoctorId.map((item, index) => {\n                            return (\n                                <div className=\"each-doctor\" key= {index}>\n                                    <div className=\"dt-content-left\">\n                                        <div className=\"profile-doctor\">\n                                            <ProfileDoctor\n                                                doctorId={item}\n                                                isShowDescriptionDoctor={true}\n                                                isShowLinkDetail = {true}\n                                                isShowPrice = {false}\n                                            />    \n                                        </div>\n                                    </div>\n                                    <div className=\"dt-content-right\">\n                                        <div className=\"doctor-schdule\">\n                                            <DoctorSchedule\n                                                doctorIdFromParent={item}\n                                            />\n\n                                        </div>\n                                        <div className=\"doctor-extra-infor\">\n                                            <DoctorExtraInfor\n                                                doctorIdFromParent={item}\n                                            />\n                                            \n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                </div>\n            </div>\n            \n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        language: state.app.language,\n\n    };\n};\nconst mapDispatchToProps = dispath => {\n    return {};\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Clinic/ManageClinic.js",["334","335"],"import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './ManageClinic.scss';\nimport MarkdownIt from \"markdown-it\";\nimport MdEditor from 'react-markdown-editor-lite';\nimport{CommonUtils, commouUtils} from '../../../utils';\nimport {createNewClinic} from '../../../services/userService';\nimport {toast} from \"react-toastify\";\n\nconst mdParser = new MarkdownIt();\n\nclass ManageSpecialty extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            name: '',\n            address: '',\n            imageBase64: '',\n            descriptionHTML: '',\n            descriptionMarkdown: '',\n        }\n    }\n\n    async componentDidMount(){\n\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n    }\n\n    handleOnchangeInput = (event, id) => {\n        let stateCopy = {...this.state}\n        stateCopy[id] = event.target.value;\n        this.setState({\n            ...stateCopy\n        })\n    }\n\n    handleEditorChange = ({html, text}) => {\n        this.setState({\n            descriptionHTML: html,\n            descriptionMarkdown: text,\n        })\n    }\n\n    handleOnchangeImage = async(event) => {\n        let data = event.target.files;\n        let file = data[0];\n        if (file) {\n            let base64 = await CommonUtils.getBase64(file);\n            this.setState({\n                imageBase64: base64\n            })\n        }\n    }\n\n    handleSaveNewClinic = async () => {\n        let res = await createNewClinic(this.state)\n        if (res && res.errCode === 0){\n            toast.success('add new specialty succeeds')\n            this.setState({\n                name: '',\n                imageBase64: '',\n                address: '',\n                descriptionHTML: '',\n                descriptionMarkdown: '',\n            })\n        }else {\n            toast.error('Something wrongs...')\n            console.log(res)\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"manage-specialty-container\">\n                <div className=\"ms-title\">\n                    Quan ly phong kham\n                </div>\n                <div className=\"add-new-specialty row\">\n                <div className=\"col-6 form-group\">\n                        <label>Ten phong kham</label>\n                        <input className=\"form-control\" type=\"text\" value={this.state.name}\n                            onChange={(event) => this.handleOnchangeInput(event, 'name')}/>\n                    </div>\n                    <div className=\"col-6 form-group\">\n                        <label>Anh phong kham</label>\n                        <input className=\"form-control\" type=\"file\"\n                            onChange={(event) => this.handleOnchangeImage(event)}/>\n                    </div>\n                    <div className=\"col-6 form-group\">\n                        <label>Dia chi phong kham</label>\n                        <input className=\"form-control\" type=\"text\" value={this.state.address}\n                            onChange={(event) => this.handleOnchangeInput(event, 'address')}/>\n                    </div>\n                    <div className=\"col-12\">\n                        <MdEditor\n                            style={{height: '300px'}}\n                            renderHTML= {text => mdParser.render(text)}\n                            onChange={this.handleEditorChange}\n                            value={this.state.descriptionMarkdown}\n                        />\n                    </div>\n                    <div className=\"col-12\">\n                        <button className=\"btn-save-specialty\"\n                            onClick={() => this.handleSaveNewClinic()}>\n                                Save\n                            </button>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        language: state.app.language,\n\n    };\n};\nconst mapDispatchToProps = dispath => {\n    return {};\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSpecialty);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Clinic/DetailClinic.js",["336","337","338","339","340"],"import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './DetailClinic.scss';\nimport HomeHeader from '../../HomePage/HeaderHome';\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\nimport DoctorExtraInfor from \"../Doctor/DoctorExtraInfor\";\nimport ProfileDoctor from \"../Doctor/ProfileDoctor\";\nimport {getAllDetailClinicById, getAllCodeService} from '../../../services/userService';\nimport _ from 'lodash';\nimport {LANGUAGES} from '../../../utils';\n\nclass DetailSpecialty extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            arrDoctorId: [],\n            dataDetailClinic: {},\n        }\n    }\n\n    async componentDidMount(){\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id;\n\n            let res = await getAllDetailClinicById({\n                id: id,\n            });\n\n            if (res && res.errCode === 0 ){\n                let data = res.data;\n                let arrDoctorId= [];\n                if (data && !_.isEmpty(res.data)){\n                    let arr = data.doctorClinic;\n                    if (arr && arr.length > 0){\n                        arr.map(item => {\n                            arrDoctorId.push(item.doctorId)\n                        })\n                    }\n                }\n            \n                this.setState({\n                    dataDetailClinic: res.data,\n                    arrDoctorId : arrDoctorId,\n                })\n            }\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n    }\n\n    render(){\n        let {arrDoctorId, dataDetailClinic} = this.state;\n        console.log('check state', this.state)\n        let {language} = this.props;\n        return(\n            <div className=\"detail-specialty-container\">\n                <HomeHeader />\n                <div className=\"detail-specialty-body\">\n                    <div className=\"description-spcialty\">\n                        {dataDetailClinic && !_.isEmpty(dataDetailClinic)\n                        &&\n                        <>\n                            <div>{dataDetailClinic.name}</div>\n                            <div dangerouslySetInnerHTML={{__html: dataDetailClinic.descriptionHTML}}>\n\n                            </div>\n                        </>\n                        \n                        }\n                    </div>\n\n                    {arrDoctorId && arrDoctorId.length > 0 &&\n                        arrDoctorId.map((item, index) => {\n                            return (\n                                <div className=\"each-doctor\" key= {index}>\n                                    <div className=\"dt-content-left\">\n                                        <div className=\"profile-doctor\">\n                                            <ProfileDoctor\n                                                doctorId={item}\n                                                isShowDescriptionDoctor={true}\n                                                isShowLinkDetail = {true}\n                                                isShowPrice = {false}\n                                            />    \n                                        </div>\n                                    </div>\n                                    <div className=\"dt-content-right\">\n                                        <div className=\"doctor-schdule\">\n                                            <DoctorSchedule\n                                                doctorIdFromParent={item}\n                                            />\n\n                                        </div>\n                                        <div className=\"doctor-extra-infor\">\n                                            <DoctorExtraInfor\n                                                doctorIdFromParent={item}\n                                            />\n                                            \n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                </div>\n            </div>\n            \n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        language: state.app.language,\n\n    };\n};\nconst mapDispatchToProps = dispath => {\n    return {};\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);","/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/ManagePatient.js",["341"],"/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/RemedyModal.js",["342","343","344","345","346","347","348"],{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","severity":1,"message":"354","line":15,"column":8,"nodeType":"355","messageId":"356","endLine":15,"endColumn":14},{"ruleId":"353","severity":1,"message":"357","line":20,"column":10,"nodeType":"355","messageId":"356","endLine":20,"endColumn":32},{"ruleId":"353","severity":1,"message":"358","line":13,"column":33,"nodeType":"355","messageId":"356","endLine":13,"endColumn":43},{"ruleId":"353","severity":1,"message":"359","line":3,"column":9,"nodeType":"355","messageId":"356","endLine":3,"endColumn":17},{"ruleId":"353","severity":1,"message":"358","line":10,"column":17,"nodeType":"355","messageId":"356","endLine":10,"endColumn":27},{"ruleId":"353","severity":1,"message":"360","line":7,"column":10,"nodeType":"355","messageId":"356","endLine":7,"endColumn":26},{"ruleId":"361","severity":1,"message":"362","line":33,"column":1,"nodeType":"363","endLine":39,"endColumn":3},{"ruleId":"364","severity":1,"message":"365","line":31,"column":25,"nodeType":"366","endLine":31,"endColumn":101},{"ruleId":"367","severity":1,"message":"368","line":63,"column":38,"nodeType":"369","messageId":"370","endLine":63,"endColumn":40},{"ruleId":"353","severity":1,"message":"360","line":3,"column":9,"nodeType":"355","messageId":"356","endLine":3,"endColumn":25},{"ruleId":"353","severity":1,"message":"371","line":4,"column":8,"nodeType":"355","messageId":"356","endLine":4,"endColumn":14},{"ruleId":"372","severity":1,"message":"373","line":10,"column":90,"nodeType":"366","endLine":10,"endColumn":117},{"ruleId":"353","severity":1,"message":"360","line":4,"column":9,"nodeType":"355","messageId":"356","endLine":4,"endColumn":25},{"ruleId":"353","severity":1,"message":"360","line":4,"column":9,"nodeType":"355","messageId":"356","endLine":4,"endColumn":25},{"ruleId":"353","severity":1,"message":"360","line":3,"column":9,"nodeType":"355","messageId":"356","endLine":3,"endColumn":25},{"ruleId":"353","severity":1,"message":"371","line":4,"column":8,"nodeType":"355","messageId":"356","endLine":4,"endColumn":14},{"ruleId":"353","severity":1,"message":"360","line":2,"column":10,"nodeType":"355","messageId":"356","endLine":2,"endColumn":26},{"ruleId":"353","severity":1,"message":"374","line":195,"column":98,"nodeType":"355","messageId":"356","endLine":195,"endColumn":104},{"ruleId":"367","severity":1,"message":"368","line":345,"column":36,"nodeType":"369","messageId":"370","endLine":345,"endColumn":38},{"ruleId":"353","severity":1,"message":"375","line":14,"column":7,"nodeType":"355","messageId":"356","endLine":14,"endColumn":14},{"ruleId":"376","severity":1,"message":"377","line":62,"column":44,"nodeType":"378","messageId":"379","endLine":62,"endColumn":46},{"ruleId":"376","severity":1,"message":"377","line":73,"column":44,"nodeType":"378","messageId":"379","endLine":73,"endColumn":46},{"ruleId":"376","severity":1,"message":"377","line":83,"column":44,"nodeType":"378","messageId":"379","endLine":83,"endColumn":46},{"ruleId":"376","severity":1,"message":"377","line":94,"column":44,"nodeType":"378","messageId":"379","endLine":94,"endColumn":46},{"ruleId":"376","severity":1,"message":"377","line":103,"column":45,"nodeType":"378","messageId":"379","endLine":103,"endColumn":47},{"ruleId":"380","severity":1,"message":"381","line":169,"column":13,"nodeType":"382","messageId":"370","endLine":169,"endColumn":21},{"ruleId":"353","severity":1,"message":"383","line":271,"column":26,"nodeType":"355","messageId":"356","endLine":271,"endColumn":39},{"ruleId":"353","severity":1,"message":"384","line":7,"column":9,"nodeType":"355","messageId":"356","endLine":7,"endColumn":21},{"ruleId":"353","severity":1,"message":"385","line":7,"column":34,"nodeType":"355","messageId":"356","endLine":7,"endColumn":44},{"ruleId":"353","severity":1,"message":"386","line":9,"column":8,"nodeType":"355","messageId":"356","endLine":9,"endColumn":14},{"ruleId":"376","severity":1,"message":"377","line":53,"column":41,"nodeType":"378","messageId":"379","endLine":53,"endColumn":43},{"ruleId":"376","severity":1,"message":"377","line":104,"column":52,"nodeType":"378","messageId":"379","endLine":104,"endColumn":54},{"ruleId":"353","severity":1,"message":"387","line":2,"column":8,"nodeType":"355","messageId":"356","endLine":2,"endColumn":9},{"ruleId":"353","severity":1,"message":"388","line":9,"column":7,"nodeType":"355","messageId":"356","endLine":9,"endColumn":18},{"ruleId":"353","severity":1,"message":"389","line":23,"column":17,"nodeType":"355","messageId":"356","endLine":23,"endColumn":21},{"ruleId":"353","severity":1,"message":"360","line":2,"column":10,"nodeType":"355","messageId":"356","endLine":2,"endColumn":26},{"ruleId":"390","severity":1,"message":"391","line":53,"column":89,"nodeType":"392","messageId":"393","endLine":70,"endColumn":26},{"ruleId":"353","severity":1,"message":"360","line":2,"column":10,"nodeType":"355","messageId":"356","endLine":2,"endColumn":26},{"ruleId":"353","severity":1,"message":"394","line":5,"column":9,"nodeType":"355","messageId":"356","endLine":5,"endColumn":16},{"ruleId":"353","severity":1,"message":"387","line":6,"column":8,"nodeType":"355","messageId":"356","endLine":6,"endColumn":9},{"ruleId":"353","severity":1,"message":"360","line":2,"column":10,"nodeType":"355","messageId":"356","endLine":2,"endColumn":26},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"353","severity":1,"message":"395","line":5,"column":8,"nodeType":"355","messageId":"356","endLine":5,"endColumn":20},{"ruleId":"353","severity":1,"message":"396","line":5,"column":10,"nodeType":"355","messageId":"356","endLine":5,"endColumn":33},{"ruleId":"376","severity":1,"message":"377","line":39,"column":27,"nodeType":"378","messageId":"379","endLine":39,"endColumn":29},{"ruleId":"353","severity":1,"message":"397","line":10,"column":15,"nodeType":"355","messageId":"356","endLine":10,"endColumn":19},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"353","severity":1,"message":"398","line":4,"column":10,"nodeType":"355","messageId":"356","endLine":4,"endColumn":36},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"353","severity":1,"message":"399","line":7,"column":21,"nodeType":"355","messageId":"356","endLine":7,"endColumn":32},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"376","severity":1,"message":"377","line":39,"column":38,"nodeType":"378","messageId":"379","endLine":39,"endColumn":40},{"ruleId":"376","severity":1,"message":"377","line":87,"column":38,"nodeType":"378","messageId":"379","endLine":87,"endColumn":40},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"353","severity":1,"message":"399","line":7,"column":21,"nodeType":"355","messageId":"356","endLine":7,"endColumn":32},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"353","severity":1,"message":"400","line":9,"column":33,"nodeType":"355","messageId":"356","endLine":9,"endColumn":50},{"ruleId":"353","severity":1,"message":"401","line":11,"column":9,"nodeType":"355","messageId":"356","endLine":11,"endColumn":18},{"ruleId":"376","severity":1,"message":"377","line":36,"column":38,"nodeType":"378","messageId":"379","endLine":36,"endColumn":40},{"ruleId":"353","severity":1,"message":"402","line":59,"column":14,"nodeType":"355","messageId":"356","endLine":59,"endColumn":22},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"353","severity":1,"message":"360","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":26},{"ruleId":"353","severity":1,"message":"403","line":5,"column":24,"nodeType":"355","messageId":"356","endLine":5,"endColumn":35},{"ruleId":"353","severity":1,"message":"404","line":6,"column":9,"nodeType":"355","messageId":"356","endLine":6,"endColumn":14},{"ruleId":"353","severity":1,"message":"386","line":7,"column":8,"nodeType":"355","messageId":"356","endLine":7,"endColumn":14},{"ruleId":"353","severity":1,"message":"405","line":57,"column":45,"nodeType":"355","messageId":"356","endLine":57,"endColumn":54},{"ruleId":"353","severity":1,"message":"406","line":57,"column":56,"nodeType":"355","messageId":"356","endLine":57,"endColumn":66},{"ruleId":"407","severity":1,"message":"408","line":68,"column":62,"nodeType":"409","endLine":68,"endColumn":80},"no-native-reassign",["410"],"no-negated-in-lhs",["411"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'CustomToastCloseButton' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'Redirect' is defined but never used.","'FormattedMessage' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Slider' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'avatar' is assigned a value but never used.","'options' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'doctorId'.","ObjectExpression","'listSpecialty' is assigned a value but never used.","'CRUD_Actions' is defined but never used.","'dateFormat' is defined but never used.","'moment' is defined but never used.","'_' is defined but never used.","'createError' is assigned a value but never used.","'data' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'emitter' is defined but never used.","'localization' is defined but never used.","'getScheduleDoctorByDate' is defined but never used.","'link' is defined but never used.","'postPatientBookAppointment' is defined but never used.","'commouUtils' is defined but never used.","'getAllCodeService' is defined but never used.","'LANGUAGES' is defined but never used.","'language' is assigned a value but never used.","'ModalHeader' is defined but never used.","'toast' is defined but never used.","'dataModal' is assigned a value but never used.","'sendRemedy' is assigned a value but never used.","jsx-a11y/aria-props","aria-lable: This attribute is an invalid ARIA attribute. Did you mean to use aria-label?","JSXAttribute","no-global-assign","no-unsafe-negation"]