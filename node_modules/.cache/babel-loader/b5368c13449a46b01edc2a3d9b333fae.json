{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { getAllCodeService, createNewUserService, getAllUsers, deleteUserService, editUserService, getTopDoctorHomeService, getAllDoctors, saveDetailDoctorsService } from '../../services/userService';\nimport { toast } from \"react-toastify\";\nexport const fetchGenderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_GENDER_START\n      });\n      let res = await getAllCodeService(\"GENDER\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchGenderSuccess(res.data));\n      } else {\n        dispatch(fetchGenderFailed());\n      }\n    } catch (e) {\n      dispatch(fetchGenderFailed());\n      console.log('fetchGenderStart error', e);\n    }\n  };\n};\nexport const fetchGenderSuccess = genderData => ({\n  type: actionTypes.FETCH_GENDER_SUCCESS,\n  data: genderData\n});\nexport const fetchGenderFailed = () => ({\n  type: actionTypes.FETCH_GENDER_FAIDED\n}); //position\n\nexport const fetchPositionSuccess = positionData => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS,\n  data: positionData\n});\nexport const fetchPositionFailed = () => ({\n  type: actionTypes.FETCH_POSITION_FAIDED\n});\nexport const fetchPositionStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"POSITION\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchPositionSuccess(res.data));\n      } else {\n        dispatch(fetchPositionFailed());\n      }\n    } catch (e) {\n      dispatch(fetchPositionFailed());\n      console.log('fetchPositionStart error', e);\n    }\n  };\n}; //role\n\nexport const fetchRoleSuccess = roleData => ({\n  type: actionTypes.FETCH_ROLE_SUCCESS,\n  data: roleData\n});\nexport const fetchRoleFailed = () => ({\n  type: actionTypes.FETCH_ROLE_FAIDED\n});\nexport const fetchRoleStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"ROLE\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchRoleSuccess(res.data));\n      } else {\n        dispatch(fetchRoleFailed());\n      }\n    } catch (e) {\n      dispatch(fetchRoleFailed());\n      console.log('fetchRoleStart error', e);\n    }\n  };\n};\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserService(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"create a new user succeed !\");\n        dispatch(saveUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        dispatch(saveUserFailed());\n      }\n    } catch (e) {\n      dispatch(saveUserFailed());\n      console.log('fetchPositionStart error', e);\n    }\n  };\n};\nexport const saveUserSuccess = () => ({\n  type: actionTypes.CREATE_USER_SUCCESS\n});\nexport const saveUserFailed = () => ({\n  type: actionTypes.CREATE_USER_FAILDED\n});\nexport const fetchAllUsersStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllUsers('ALL');\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllUsersSuccess(res.user));\n        console.log('e', res.user);\n        toast.success(\"fetch all user succeed !\");\n      } else {\n        toast.error(\"fetch all user failed !\");\n        dispatch(fetchAllUsersFailed());\n      }\n    } catch (e) {\n      console.log('e', e);\n      toast.error(\"fetch all failed !\", e);\n      dispatch(fetchAllUsersFailed());\n    }\n  };\n};\nexport const fetchAllUsersSuccess = data => ({\n  type: actionTypes.FETCH_ALL_USERS_SUCCESS,\n  users: data\n});\nexport const fetchAllUsersFailed = () => ({\n  type: actionTypes.FETCH_ALL_USERS_FAILED\n});\nexport const deleteAUser = userId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteUserService(userId);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"delete user s !\");\n        dispatch(deleteUsersSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error(\"delete user e !\");\n        dispatch(deleteUsersFailed());\n      }\n    } catch (e) {\n      toast.error(\"delete user e !\");\n      dispatch(deleteUsersFailed());\n    }\n  };\n};\nexport const deleteUsersSuccess = () => ({\n  type: actionTypes.DELETE_USER_SUCCESS\n});\nexport const deleteUsersFailed = () => ({\n  type: actionTypes.DELETE_USER_FAILED\n});\nexport const EditAUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editUserService(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"edit succeed !\");\n        dispatch(editUsersSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        dispatch(editUserFailed());\n        toast.error(\"edit failed !\");\n      }\n    } catch (e) {\n      dispatch(editUserFailed());\n      toast.error(\"edit failed !\");\n    }\n  };\n};\n_c = EditAUser;\nexport const editUsersSuccess = () => ({\n  type: actionTypes.EDIT_USER_SUCCESS\n});\nexport const editUserFailed = () => ({\n  type: actionTypes.EDIT_USER_FAILED\n});\nexport const fetchTopDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getTopDoctorHomeService('');\n\n      if (res && res.errCode === 0) {\n        console.log('resdata', res.data);\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\n          dataDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTORS_FAILDED\n        });\n      }\n    } catch (err) {\n      console.log('err', err);\n      dispatch({\n        type: actionTypes.FETCH_TOP_DOCTORS_FAILDED\n      });\n    }\n  };\n};\nexport const fetchAllDoctors = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllDoctors();\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTORS_SUCCESS,\n          dataDr: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTORS_FAILED\n        });\n      }\n    } catch (err) {\n      console.log('FETCH_ALL_DOCTORS_FAILED', err);\n      dispatch({\n        type: actionTypes.FETCH_ALL_DOCTORS_FAILED\n      });\n    }\n  };\n};\nexport const saveDetailDoctors = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await saveDetailDoctorsService(data);\n      console.log('save', res);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"save detail user s !\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTORS_SUCCESS,\n          dataDr: res.data\n        });\n      } else {\n        toast.error(\"save detail user f1 !\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTORS_FAILED\n        });\n      }\n    } catch (err) {\n      toast.err(\"save detail user f !\");\n      console.log('SAVE_DETAIL_DOCTORS_FAILED', err);\n      dispatch({\n        type: actionTypes.SAVE_DETAIL_DOCTORS_FAILED\n      });\n    }\n  };\n};\nexport const fetchAllScheduleTime = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"TIME\");\n\n      if (res && res.errCode === 0) {\n        console.log(\"datatime\", res.data);\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\n          dataTime: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED\n        });\n      }\n    } catch (e) {\n      console.log('FETCH_ALLCODE_SCHEDULE_TIME_FAILDED:', e);\n      dispatch({\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED\n      });\n    }\n  };\n};\nexport const getRequiredDoctorInfor = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_START\n      });\n      let resPrice = await getAllCodeService(\"PRICE\");\n      let resPayment = await getAllCodeService(\"PAYMENT\");\n      let resProvince = await getAllCodeService(\"PROVINCE\");\n\n      if (resPrice && resPrice.errCode === 0 && resPayment && resPayment.errCode === 0 && resProvince && resProvince.errCode === 0) {\n        let data = {\n          resPrice: resPrice.data,\n          resPayment: resPayment.data,\n          resProvince: resProvince.data\n        };\n        dispatch(fetchRequiredDoctorInforSuccess(data));\n      } else {\n        dispatch(fetchRequiredDoctorInforFailed());\n        console.log('fail');\n      }\n    } catch (e) {\n      dispatch(fetchRequiredDoctorInforFailed());\n      console.log('fetchGenderStart error', e);\n    }\n  };\n};\nexport const fetchRequiredDoctorInforSuccess = allRequiredData => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS,\n  data: allRequiredData\n});\nexport const fetchRequiredDoctorInforFailed = () => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAIDED\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"EditAUser\");","map":{"version":3,"sources":["/home/asus2/Frontend-React.JS-QuickStart/src/store/actions/adminActions.js"],"names":["actionTypes","getAllCodeService","createNewUserService","getAllUsers","deleteUserService","editUserService","getTopDoctorHomeService","getAllDoctors","saveDetailDoctorsService","toast","fetchGenderStart","dispatch","getState","type","FETCH_GENDER_START","res","errCode","fetchGenderSuccess","data","fetchGenderFailed","e","console","log","genderData","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAIDED","fetchPositionSuccess","positionData","FETCH_POSITION_SUCCESS","fetchPositionFailed","FETCH_POSITION_FAIDED","fetchPositionStart","fetchRoleSuccess","roleData","FETCH_ROLE_SUCCESS","fetchRoleFailed","FETCH_ROLE_FAIDED","fetchRoleStart","createNewUser","success","saveUserSuccess","fetchAllUsersStart","saveUserFailed","CREATE_USER_SUCCESS","CREATE_USER_FAILDED","fetchAllUsersSuccess","user","error","fetchAllUsersFailed","FETCH_ALL_USERS_SUCCESS","users","FETCH_ALL_USERS_FAILED","deleteAUser","userId","deleteUsersSuccess","deleteUsersFailed","DELETE_USER_SUCCESS","DELETE_USER_FAILED","EditAUser","editUsersSuccess","editUserFailed","EDIT_USER_SUCCESS","EDIT_USER_FAILED","fetchTopDoctor","FETCH_TOP_DOCTORS_SUCCESS","dataDoctors","FETCH_TOP_DOCTORS_FAILDED","err","fetchAllDoctors","FETCH_ALL_DOCTORS_SUCCESS","dataDr","FETCH_ALL_DOCTORS_FAILED","saveDetailDoctors","SAVE_DETAIL_DOCTORS_SUCCESS","SAVE_DETAIL_DOCTORS_FAILED","fetchAllScheduleTime","FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS","dataTime","FETCH_ALLCODE_SCHEDULE_TIME_FAILDED","getRequiredDoctorInfor","FETCH_REQUIRED_DOCTOR_INFOR_START","resPrice","resPayment","resProvince","fetchRequiredDoctorInforSuccess","fetchRequiredDoctorInforFailed","allRequiredData","FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS","FETCH_REQUIRED_DOCTOR_INFOR_FAIDED"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport {getAllCodeService, createNewUserService, getAllUsers,deleteUserService, editUserService, getTopDoctorHomeService, getAllDoctors, saveDetailDoctorsService} from '../../services/userService'\r\nimport {toast} from \"react-toastify\";\r\n\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({type: actionTypes.FETCH_GENDER_START})\r\n            let res = await getAllCodeService(\"GENDER\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchGenderSuccess(res.data))\r\n            }else {\r\n                dispatch(fetchGenderFailed());\r\n            }\r\n        }catch(e){\r\n            dispatch(fetchGenderFailed());\r\n            console.log('fetchGenderStart error', e)\r\n        }\r\n        \r\n    }\r\n}\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: genderData\r\n})\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAIDED\r\n})\r\n//position\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data: positionData\r\n})\r\nexport const fetchPositionFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAIDED\r\n})\r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"POSITION\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchPositionSuccess(res.data))\r\n            }else {\r\n                dispatch(fetchPositionFailed());\r\n            }\r\n        }catch(e){\r\n            dispatch(fetchPositionFailed());\r\n            console.log('fetchPositionStart error', e)\r\n        }\r\n        \r\n    }\r\n}\r\n//role\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData\r\n})\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_ROLE_FAIDED\r\n})\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"ROLE\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data))\r\n            }else {\r\n                dispatch(fetchRoleFailed());\r\n            }\r\n        }catch(e){\r\n            dispatch(fetchRoleFailed());\r\n            console.log('fetchRoleStart error', e)\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"create a new user succeed !\");\r\n                dispatch(saveUserSuccess())\r\n                dispatch(fetchAllUsersStart())\r\n            }else {\r\n                dispatch(saveUserFailed());\r\n            }\r\n        }catch(e){\r\n            dispatch(saveUserFailed());\r\n            console.log('fetchPositionStart error', e)\r\n        }\r\n        \r\n    }\r\n}\r\nexport const saveUserSuccess = () => ({\r\n    type:actionTypes.CREATE_USER_SUCCESS\r\n})\r\nexport const saveUserFailed = () => ({\r\n    type:actionTypes.CREATE_USER_FAILDED\r\n})\r\nexport const fetchAllUsersStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllUsers('ALL');\r\n            if (res && res.errCode === 0) {              \r\n                dispatch(fetchAllUsersSuccess(res.user))\r\n                console.log('e',res.user);\r\n                toast.success(\"fetch all user succeed !\");\r\n            }else {\r\n                toast.error(\"fetch all user failed !\");\r\n                dispatch(fetchAllUsersFailed());\r\n            }\r\n        }catch(e){\r\n            console.log('e',e);\r\n            toast.error(\"fetch all failed !\",e);\r\n            dispatch(fetchAllUsersFailed());\r\n        }\r\n        \r\n    }\r\n}\r\nexport const fetchAllUsersSuccess = (data) => ({\r\n    type:actionTypes.FETCH_ALL_USERS_SUCCESS,\r\n    users:data\r\n})\r\nexport const fetchAllUsersFailed = () => ({\r\n    type:actionTypes.FETCH_ALL_USERS_FAILED,\r\n})\r\nexport const deleteAUser = (userId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await deleteUserService(userId);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"delete user s !\");\r\n                dispatch(deleteUsersSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            }else {\r\n                toast.error(\"delete user e !\");\r\n                dispatch(deleteUsersFailed());\r\n            }\r\n        }catch(e){\r\n            toast.error(\"delete user e !\");\r\n            dispatch(deleteUsersFailed());\r\n        }\r\n        \r\n    }\r\n}\r\nexport const deleteUsersSuccess = () => ({\r\n    type:actionTypes.DELETE_USER_SUCCESS,\r\n})\r\nexport const deleteUsersFailed = () => ({\r\n    type:actionTypes.DELETE_USER_FAILED,\r\n})\r\n\r\nexport const EditAUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await editUserService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"edit succeed !\");\r\n                dispatch(editUsersSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            }else {\r\n                dispatch(editUserFailed());\r\n                toast.error(\"edit failed !\");\r\n            }\r\n        }catch(e){\r\n            dispatch(editUserFailed());\r\n            toast.error(\"edit failed !\");\r\n        }  \r\n    }\r\n}\r\n\r\nexport const editUsersSuccess = () => ({\r\n    type:actionTypes.EDIT_USER_SUCCESS,\r\n})\r\nexport const editUserFailed = () => ({\r\n    type:actionTypes.EDIT_USER_FAILED,\r\n})\r\n\r\nexport const fetchTopDoctor = () => {\r\n    return async(dispatch, getState)=> {\r\n        try{\r\n            let res = await getTopDoctorHomeService('');\r\n            if(res && res.errCode === 0) {\r\n                console.log('resdata', res.data);\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\r\n                    dataDoctors: res.data,\r\n                })\r\n                \r\n\r\n            }else{\r\n                dispatch({\r\n                    type:actionTypes.FETCH_TOP_DOCTORS_FAILDED\r\n                })\r\n            }\r\n        }catch(err){\r\n            console.log('err', err)\r\n            dispatch({\r\n                type:actionTypes.FETCH_TOP_DOCTORS_FAILDED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllDoctors = () => {\r\n    return async(dispatch, getState)=> {\r\n        try{\r\n            let res = await getAllDoctors();\r\n            if(res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_SUCCESS,\r\n                    dataDr: res.data\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type:actionTypes.FETCH_ALL_DOCTORS_FAILED\r\n                })\r\n            }\r\n        }catch(err){\r\n            console.log('FETCH_ALL_DOCTORS_FAILED', err)\r\n            dispatch({\r\n                type:actionTypes.FETCH_ALL_DOCTORS_FAILED\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const saveDetailDoctors = (data) => {\r\n    return async(dispatch, getState)=> {\r\n        try{\r\n            let res = await saveDetailDoctorsService(data);\r\n            console.log('save', res)\r\n            if(res && res.errCode === 0) {\r\n                toast.success(\"save detail user s !\");\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTORS_SUCCESS,\r\n                    dataDr: res.data\r\n                })\r\n            }else{\r\n                toast.error(\"save detail user f1 !\");\r\n                dispatch({\r\n                    type:actionTypes.SAVE_DETAIL_DOCTORS_FAILED\r\n                })\r\n            }\r\n        }catch(err){\r\n            toast.err(\"save detail user f !\");\r\n            console.log('SAVE_DETAIL_DOCTORS_FAILED', err)\r\n            dispatch({\r\n                type:actionTypes.SAVE_DETAIL_DOCTORS_FAILED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"TIME\");\r\n            if(res && res.errCode === 0){\r\n                console.log(\"datatime\", res.data)\r\n                dispatch({\r\n                    type:actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\r\n                    dataTime: res.data\r\n                })\r\n            }else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED\r\n                })\r\n            }\r\n        }catch(e){\r\n            console.log('FETCH_ALLCODE_SCHEDULE_TIME_FAILDED:', e)\r\n            dispatch({ type:actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED})\r\n        }\r\n    }\r\n}\r\n\r\nexport const getRequiredDoctorInfor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_START})\r\n\r\n            let resPrice = await getAllCodeService(\"PRICE\");\r\n            let resPayment = await getAllCodeService(\"PAYMENT\");\r\n            let resProvince = await getAllCodeService(\"PROVINCE\");\r\n\r\n            if (resPrice && resPrice.errCode === 0\r\n                && resPayment && resPayment.errCode === 0\r\n                && resProvince && resProvince.errCode === 0) {\r\n                    let data = {\r\n                        resPrice: resPrice.data,\r\n                        resPayment: resPayment.data,\r\n                        resProvince: resProvince.data\r\n                    }\r\n                    dispatch(fetchRequiredDoctorInforSuccess(data))\r\n                } else {\r\n                    dispatch(fetchRequiredDoctorInforFailed());\r\n                    console.log('fail')\r\n                }\r\n\r\n        }catch(e){\r\n            dispatch(fetchRequiredDoctorInforFailed());\r\n            console.log('fetchGenderStart error', e)\r\n        }\r\n    }\r\n}\r\n export const fetchRequiredDoctorInforSuccess = (allRequiredData) => ({\r\n     type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS,\r\n     data: allRequiredData\r\n })\r\n\r\n export const fetchRequiredDoctorInforFailed = () => ({\r\n     type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAIDED\r\n })"]},"metadata":{},"sourceType":"module"}