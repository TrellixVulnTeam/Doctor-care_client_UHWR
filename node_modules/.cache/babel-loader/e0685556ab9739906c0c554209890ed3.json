{"ast":null,"code":"var _jsxFileName = \"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/ProfileDoctor.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './ProfileDoctor.scss';\nimport { getProfileDoctorById } from \"../../../services/userService\";\nimport { LANGUAGES } from '../../../utils';\nimport NumberFormat from \"react-number-format\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProfileDoctor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getInforDoctor = async id => {\n      let result = {};\n\n      if (id) {\n        let res = await getProfileDoctorById(id);\n\n        if (res && res.errCode === 0) {\n          result = res.data;\n        }\n      } else {\n        console.log('profile');\n      }\n\n      return result;\n    };\n\n    this.state = {\n      dataProfile: {}\n    };\n  }\n\n  async componentDidMount() {\n    let data = await this.getInforDoctor(this.props.doctorId);\n    this.setState({\n      dataProfile: data\n    });\n  }\n\n  async componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.language !== prevProps.language) {}\n\n    if (this.props.doctorId !== prevProps.doctorId) {}\n  }\n\n  render() {\n    let {\n      dataProfile\n    } = this.state;\n    let {\n      language\n    } = this.props;\n    console.log('check state profile:', this.state);\n    let nameVi = '',\n        nameEn = '';\n\n    if (dataProfile && dataProfile.positionData) {\n      nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName}`;\n      nameVi = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-doctor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"intro-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-left\",\n          style: {\n            backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"up\",\n            children: language === LANGUAGES.VI ? nameVi : nameEn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"down\",\n            children: dataProfile && dataProfile.Markdown && dataProfile.Markdown.description && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: dataProfile.Markdown.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"price\",\n        children: [\"Gia Kham:\", dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.VI && /*#__PURE__*/_jsxDEV(NumberFormat, {\n          className: \"currency\",\n          value: dataProfile.Doctor_infor.priceTypeData.valueVi,\n          displayType: 'text',\n          thousandSeparator: true,\n          suffix: 'VND'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.EN && /*#__PURE__*/_jsxDEV(NumberFormat, {\n          className: \"currency\",\n          value: dataProfile.Doctor_infor.priceTypeData.valueEn,\n          displayType: 'text',\n          thousandSeparator: true,\n          suffix: '$'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.app.language\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);","map":{"version":3,"sources":["/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/ProfileDoctor.js"],"names":["React","Component","connect","FormattedMessage","getProfileDoctorById","LANGUAGES","NumberFormat","ProfileDoctor","constructor","props","getInforDoctor","id","result","res","errCode","data","console","log","state","dataProfile","componentDidMount","doctorId","setState","componentDidUpdate","prevProps","prevState","snapshot","language","render","nameVi","nameEn","positionData","valueVi","lastName","firstName","valueEn","backgroundImage","image","VI","Markdown","description","Doctor_infor","priceTypeData","EN","mapStateToProps","app","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './ProfileDoctor.scss';\nimport { getProfileDoctorById } from \"../../../services/userService\";\nimport {LANGUAGES} from '../../../utils';\nimport NumberFormat from \"react-number-format\";\n\nclass ProfileDoctor extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            dataProfile: {}\n        }\n    }\n\n    async componentDidMount() {\n        let data = await this.getInforDoctor(this.props.doctorId);\n        this.setState({\n            dataProfile: data\n        })\n    }\n\n    getInforDoctor = async (id) => {\n        let result = {};\n        if (id) {\n            let res = await getProfileDoctorById(id);\n            if (res && res.errCode === 0){\n                result = res.data;\n            }\n        }else{\n            console.log('profile')\n        }\n\n        return result;\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n        if (this.props.doctorId !== prevProps.doctorId){\n            \n        }\n    }\n\n    render(){\n        let {dataProfile} = this.state;\n        let {language} = this.props;\n        console.log('check state profile:', this.state)\n\n        let nameVi = '', nameEn = '';\n        if  (dataProfile && dataProfile.positionData){\n            nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName}`\n            nameVi = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`\n        }\n        return(\n            <div className=\"profile-doctor-container\">\n                <div className=\"intro-doctor\">\n                    <div\n                        className=\"content-left\"\n                        style={{backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})`}}>\n                    </div>\n                    <div className=\"content-right\">\n                        <div className=\"up\">\n                            {language === LANGUAGES.VI ? nameVi : nameEn}\n                        </div>\n                        <div className=\"down\">\n                            {dataProfile && dataProfile.Markdown\n                                && dataProfile.Markdown.description\n                                &&\n                                <span>\n                                    {dataProfile.Markdown.description}\n                                </span>\n                            }\n                        </div>\n                    </div>\n                    \n                </div>\n                <div className=\"price\">\n                    Gia Kham:\n                    {dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.VI &&\n                        <NumberFormat \n                            className=\"currency\"\n                            value={dataProfile.Doctor_infor.priceTypeData.valueVi}\n                            displayType={'text'}\n                            thousandSeparator = {true}\n                            suffix = {'VND'}\n                        />\n                    }\n                    {dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.EN &&\n                        <NumberFormat \n                            className=\"currency\"\n                            value={dataProfile.Doctor_infor.priceTypeData.valueEn}\n                            displayType={'text'}\n                            thousandSeparator = {true}\n                            suffix = {'$'}\n                        />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        language: state.app.language\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);"]},"metadata":{},"sourceType":"module"}