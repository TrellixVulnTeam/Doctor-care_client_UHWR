{"ast":null,"code":"var _jsxFileName = \"/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/ManageSchedule.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport './ManageSchedule.scss';\nimport { FormattedMessage } from 'react-intl';\nimport Select from 'react-select';\nimport * as actions from \"../../../store/actions\";\nimport { CRUD_Actions, LANGUAGES, dateFormat } from '../../../utils';\nimport DatePicker from '../../../components/Input/DatePicker';\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\nimport _ from 'lodash';\nimport { saveBulkScheduleDoctor } from '../../../services/userService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ManageSchedule extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buildDataInputSelect = inputData => {\n      let result = [];\n      let {\n        language\n      } = this.props;\n\n      if (inputData && inputData.length > 0) {\n        inputData.map((item, index) => {\n          let object = {};\n          let labelVi = `${item.lastName} ${item.firstName}`;\n          let labelEn = `${item.firstName} ${item.lastName}`;\n          object.label = language === LANGUAGES.VI ? labelVi : labelEn;\n          object.value = item.id;\n          result.push(object);\n        });\n      }\n\n      return result;\n    };\n\n    this.handleChangeSelect = async selectedOption => {\n      this.setState({\n        selectedDoctor: selectedOption\n      });\n    };\n\n    this.handleOnchangeDatePicker = date => {\n      this.setState({\n        currentDate: date[0]\n      });\n    };\n\n    this.handleClickBtnTime = time => {\n      let {\n        rangeTime\n      } = this.state;\n\n      if (rangeTime && rangeTime.length > 0) {\n        rangeTime = rangeTime.map(item => {\n          if (item.id === time.id) item.isSelected = !item.isSelected;\n          return item;\n        });\n        this.setState({\n          rangeTime: rangeTime\n        });\n      }\n    };\n\n    this.handleSaveSchedule = async () => {\n      let {\n        rangeTime,\n        selectedDoctor,\n        currentDate\n      } = this.state;\n      let result = [];\n\n      if (!currentDate) {\n        toast.error('Invalid date!');\n        return;\n      }\n\n      if (selectedDoctor && _.isEmpty(selectedDoctor)) {\n        toast.error('Invalid doctor!');\n        return;\n      } // let formatedDate = moment(currentDate).format(dateFormat.SEND_TO_SERVER);\n\n\n      let formatedDate = new Date(currentDate).getTime();\n      console.log('check:', formatedDate);\n\n      if (rangeTime && rangeTime.length > 0) {\n        let selectedTime = rangeTime.filter(item => item.isSelected === true);\n\n        if (selectedTime && selectedTime.length > 0) {\n          selectedTime.map((schedule, index) => {\n            let object = {};\n            object.doctorId = selectedDoctor.value;\n            object.date = formatedDate;\n            object.timeType = schedule.keyMap;\n            result.push(object);\n          });\n        } else {\n          toast.error('Invalid selected time!');\n          return;\n        }\n      }\n\n      let res = await saveBulkScheduleDoctor({\n        arrSchedule: result,\n        doctorId: selectedDoctor.value,\n        formatedDate: formatedDate\n      });\n\n      if (res && res.errCode === 0) {\n        toast.success(\"save infor succeed!\");\n      } else {\n        toast.error(\"error saveBulkScheduleDoctor\");\n        console.log(`error saveBulkScheduleDoctor >>> res:`, res);\n      }\n\n      console.log('check res: saveBulkScheduleDoctor', res);\n      console.log('check result:', result);\n    };\n\n    this.state = {\n      listDoctors: [],\n      selectedDoctor: {},\n      currentDate: '',\n      rangeTime: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllDoctors();\n    this.props.fetchAllScheduleTime();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.allDoctors !== this.props.allDoctors) {\n      let dataSelect = this.buildDataInputSelect(this.props.allDoctors);\n      this.setState({\n        listDoctors: dataSelect\n      });\n    }\n\n    if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\n      let data = this.props.allScheduleTime;\n\n      if (data && data.length > 0) {\n        data = data.map(item => ({ ...item,\n          isSelected: false\n        }));\n      }\n\n      this.setState({\n        rangeTime: data\n      });\n    }\n  }\n\n  render() {\n    let {\n      rangeTime\n    } = this.state;\n    console.log('test manage-schedule', rangeTime);\n    let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\n    let {\n      language\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manage-schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-s-title\",\n        children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: \"manage-schedule.title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6 form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"manage-schedule.choose-doctor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: this.state.selectedDoctor,\n              onChange: this.handleChangeSelect,\n              options: this.state.listDoctors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6 form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"manage-schedule.choose-date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              onChange: this.handleOnchangeDatePicker,\n              className: \"form-control\",\n              value: this.state.currentDate,\n              minDate: yesterday\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 pick-hour-container\",\n            children: rangeTime && rangeTime.length > 0 && rangeTime.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                className: item.isSelected === true ? \"btn btn-schedule active\" : \"btn btn-schedule\",\n                onClick: () => this.handleClickBtnTime(item),\n                children: language === LANGUAGES.VI ? item.valueVI : item.valueEN\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-save-schedule\",\n              onClick: () => this.handleSaveSchedule(),\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"manage-schedule.save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStataeToProps = state => {\n  return {\n    isLoggedIn: state.user.isLoggedIn,\n    language: state.app.language,\n    allDoctors: state.admin.allDoctors,\n    allScheduleTime: state.admin.allScheduleTime\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\n    fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime())\n  };\n};\n\nexport default connect(mapStataeToProps, mapDispatchToProps)(ManageSchedule);","map":{"version":3,"sources":["/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Doctor/ManageSchedule.js"],"names":["React","Component","connect","FormattedMessage","Select","actions","CRUD_Actions","LANGUAGES","dateFormat","DatePicker","moment","toast","_","saveBulkScheduleDoctor","ManageSchedule","constructor","props","buildDataInputSelect","inputData","result","language","length","map","item","index","object","labelVi","lastName","firstName","labelEn","label","VI","value","id","push","handleChangeSelect","selectedOption","setState","selectedDoctor","handleOnchangeDatePicker","date","currentDate","handleClickBtnTime","time","rangeTime","state","isSelected","handleSaveSchedule","error","isEmpty","formatedDate","Date","getTime","console","log","selectedTime","filter","schedule","doctorId","timeType","keyMap","res","arrSchedule","errCode","success","listDoctors","componentDidMount","fetchAllDoctors","fetchAllScheduleTime","componentDidUpdate","prevProps","prevState","snapshot","allDoctors","dataSelect","allScheduleTime","data","render","yesterday","setDate","getDate","valueVI","valueEN","mapStataeToProps","isLoggedIn","user","app","admin","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport{connect} from \"react-redux\";\r\nimport './ManageSchedule.scss';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport Select from 'react-select';\r\nimport * as actions from \"../../../store/actions\";\r\nimport {CRUD_Actions, LANGUAGES, dateFormat} from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport {toast} from 'react-toastify'\r\nimport _ from 'lodash';\r\nimport {saveBulkScheduleDoctor} from '../../../services/userService';\r\n\r\nclass ManageSchedule extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listDoctors: [],\r\n            selectedDoctor: {},\r\n            currentDate:'',\r\n            rangeTime: [],\r\n            \r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTime();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.allDoctors !== this.props.allDoctors){\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime){\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0){\r\n                data = data.map(item => ({...item, isSelected:false}))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n    }\r\n\r\n    buildDataInputSelect=(inputData) => {\r\n        let result = [];\r\n        let {language} = this.props;\r\n        if(inputData && inputData.length > 0){\r\n            inputData.map((item, index) => {\r\n                let object = {};\r\n                let labelVi = `${item.lastName} ${item.firstName}`;\r\n                let labelEn = `${item.firstName} ${item.lastName}`;\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = item.id;\r\n                result.push(object);\r\n            })\r\n        }\r\n        return result;\r\n    }\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({selectedDoctor: selectedOption})\r\n    }\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        })\r\n    }\r\n\r\n    handleClickBtnTime = (time) => {\r\n        let {rangeTime} = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map(item => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            })\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSaveSchedule = async() => {\r\n        let {rangeTime, selectedDoctor, currentDate} = this.state;\r\n        let result = [];\r\n        if(!currentDate) {\r\n            toast.error('Invalid date!');\r\n            return;\r\n        }\r\n        if (selectedDoctor && _.isEmpty(selectedDoctor)){\r\n            toast.error('Invalid doctor!');\r\n            return;\r\n        }\r\n        // let formatedDate = moment(currentDate).format(dateFormat.SEND_TO_SERVER);\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        console.log('check:',formatedDate )\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter(item => item.isSelected=== true);\r\n            if(selectedTime && selectedTime.length > 0){\r\n                selectedTime.map((schedule, index) =>{\r\n                    let object = {};\r\n                    object.doctorId = selectedDoctor.value;\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }else {\r\n                toast.error('Invalid selected time!')\r\n                return;\r\n            }\r\n        }\r\n        let res = await saveBulkScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: selectedDoctor.value,\r\n            formatedDate: formatedDate\r\n        })\r\n        if (res && res.errCode === 0){\r\n            toast.success(\"save infor succeed!\");\r\n        }else{\r\n            toast.error(\"error saveBulkScheduleDoctor\");\r\n            console.log(`error saveBulkScheduleDoctor >>> res:`, res)\r\n        }\r\n        console.log('check res: saveBulkScheduleDoctor', res)\r\n        console.log('check result:', result);\r\n    }\r\n\r\n    render() {\r\n        let {rangeTime} = this.state;\r\n        console.log('test manage-schedule', rangeTime)\r\n        let yesterday = new Date(new Date().setDate(new Date().getDate() -1));\r\n\r\n        let {language} = this.props;\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\"/>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-doctor\"/>\r\n                            </label>\r\n                            <Select\r\n                                value={this.state.selectedDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.listDoctors}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label><FormattedMessage id=\"manage-schedule.choose-date\"/></label>\r\n                            <DatePicker\r\n                                onChange = {this.handleOnchangeDatePicker}\r\n                                className =\"form-control\"\r\n                                value = {this.state.currentDate}\r\n                                minDate={yesterday}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                            rangeTime.map((item, index)=>{\r\n                                return(\r\n                                    <button className={item.isSelected === true ? \"btn btn-schedule active\" : \"btn btn-schedule\"} key={index}\r\n                                    onClick={() => this.handleClickBtnTime(item)}>\r\n                                        \r\n                                        {language === LANGUAGES.VI ? item.valueVI : item.valueEN}\r\n                                    </button>\r\n                                )\r\n                                \r\n                            })}\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-save-schedule\"\r\n                            onClick={() => this.handleSaveSchedule()}>\r\n                                <FormattedMessage id=\"manage-schedule.save\"/>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nconst mapStataeToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n    };\r\n};\r\nexport default connect(mapStataeToProps, mapDispatchToProps)(ManageSchedule);"]},"metadata":{},"sourceType":"module"}