{"ast":null,"code":"var _jsxFileName = \"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/ProfileDoctor.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './ProfileDoctor.scss';\nimport { getProfileDoctorById } from \"../../../services/userService\";\nimport { LANGUAGES } from '../../../utils';\nimport NumberFormat from \"react-number-format\";\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ProfileDoctor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getInforDoctor = async id => {\n      let result = {};\n\n      if (id) {\n        let res = await getProfileDoctorById(id);\n\n        if (res && res.errCode === 0) {\n          result = res.data;\n        } else {\n          console.log('gid', res.errCode);\n        }\n      }\n\n      return result;\n    };\n\n    this.renderTimeBooking = dataTime => {\n      let {\n        language\n      } = this.props;\n\n      if (dataTime && !_.isEmpty(dataTime)) {\n        let time = language === LANGUAGES.VI ? dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\n        let date = language === LANGUAGES.VI ? moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY') : moment.unix(+dataTime.date / 1000).locale('en').format('ddd = MM/DD/YYYY');\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [time, \" - \", date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"patient.booking-modal.priceBooking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 26\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true);\n      }\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    };\n\n    this.state = {\n      dataProfile: {}\n    };\n  }\n\n  async componentDidMount() {\n    let data = await this.getInforDoctor(this.props.doctorId);\n    this.setState({\n      dataProfile: data\n    });\n  }\n\n  async componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.language !== prevProps.language) {}\n\n    if (this.props.doctorId !== prevProps.doctorId) {}\n  }\n\n  render() {\n    let {\n      dataProfile\n    } = this.state;\n    let {\n      language,\n      isShowDescriptionDoctor,\n      dataTime,\n      isShowPrice,\n      isShowLinkDetail,\n      doctorId\n    } = this.props;\n    console.log('check state profile:', this.state);\n    let nameVi = '',\n        nameEn = '';\n\n    if (dataProfile && dataProfile.positionData) {\n      nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName}`;\n      nameEn = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-doctor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"intro-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-left\",\n          style: {\n            backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"up\",\n            children: language === LANGUAGES.VI ? nameVi : nameEn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"down\",\n            children: isShowDescriptionDoctor === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: dataProfile && dataProfile.Markdown && dataProfile.Markdown.description && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: dataProfile.Markdown.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: this.renderTimeBooking(dataTime)\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"price\",\n        children: [/*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: \"patient.booking-modal.price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.VI && /*#__PURE__*/_jsxDEV(NumberFormat, {\n          className: \"currency\",\n          value: dataProfile.Doctor_infor.priceTypeData.valueVi,\n          displayType: 'text',\n          thousandSeparator: true,\n          suffix: 'VND'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.EN && /*#__PURE__*/_jsxDEV(NumberFormat, {\n          className: \"currency\",\n          value: dataProfile.Doctor_infor.priceTypeData.valueEn,\n          displayType: 'text',\n          thousandSeparator: true,\n          suffix: '$'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.app.language\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);","map":{"version":3,"sources":["/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/ProfileDoctor.js"],"names":["React","Component","connect","FormattedMessage","getProfileDoctorById","LANGUAGES","NumberFormat","_","moment","link","ProfileDoctor","constructor","props","getInforDoctor","id","result","res","errCode","data","console","log","renderTimeBooking","dataTime","language","isEmpty","time","VI","timeTypeData","valueVi","valueEn","date","unix","format","locale","state","dataProfile","componentDidMount","doctorId","setState","componentDidUpdate","prevProps","prevState","snapshot","render","isShowDescriptionDoctor","isShowPrice","isShowLinkDetail","nameVi","nameEn","positionData","lastName","firstName","backgroundImage","image","Markdown","description","Doctor_infor","priceTypeData","EN","mapStateToProps","app","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './ProfileDoctor.scss';\nimport { getProfileDoctorById } from \"../../../services/userService\";\nimport {LANGUAGES} from '../../../utils';\nimport NumberFormat from \"react-number-format\";\nimport _ from 'lodash';\nimport moment from 'moment';\nimport {link} from 'react-router-dom';\n\nclass ProfileDoctor extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            dataProfile: {}\n        }\n    }\n\n    async componentDidMount() {\n        let data = await this.getInforDoctor(this.props.doctorId);\n        this.setState({\n            dataProfile: data\n        }) \n    }\n\n    getInforDoctor = async (id) => {\n        let result = {};\n        if (id) {\n            let res = await getProfileDoctorById(id);\n            if (res && res.errCode === 0){\n                result = res.data;\n            }else{\n                console.log('gid',res.errCode)\n            }\n        }\n\n        return result;\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n        if (this.props.doctorId !== prevProps.doctorId){\n            \n        }\n    }\n\n    renderTimeBooking = (dataTime) => {\n        let {language} = this.props;\n        if (dataTime && !_.isEmpty(dataTime)){\n            let time = language === LANGUAGES.VI ?\n                dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\n            let date = language === LANGUAGES.VI ?\n                moment.unix(+dataTime.date/1000).format('dddd - DD/MM/YYYY')\n                :\n                moment.unix(+dataTime.date/1000).locale('en').format('ddd = MM/DD/YYYY')\n            return(\n                <>\n                    <div>{time} - {date}</div>\n                    <div><FormattedMessage id=\"patient.booking-modal.priceBooking\"/></div>\n                </>\n            )\n        }\n        return <></>\n    }\n\n    render(){\n        let {dataProfile} = this.state;\n        let {language, isShowDescriptionDoctor, dataTime, isShowPrice, isShowLinkDetail, doctorId} = this.props;\n        console.log('check state profile:', this.state)\n\n        let nameVi = '', nameEn = '';\n        if  (dataProfile && dataProfile.positionData){\n            nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName}`\n            nameEn = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`\n        }\n        return(\n            <div className=\"profile-doctor-container\">\n                <div className=\"intro-doctor\">\n                    <div\n                        className=\"content-left\"\n                        style={{backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})`}}>\n                    </div>\n                    <div className=\"content-right\">\n                        <div className=\"up\">\n                            {language === LANGUAGES.VI ? nameVi : nameEn}\n                        </div>\n                        <div className=\"down\">\n                            {isShowDescriptionDoctor === true ?\n                                <>\n                                    {dataProfile && dataProfile.Markdown\n                                    && dataProfile.Markdown.description\n                                    &&\n                                    <span>\n                                        {dataProfile.Markdown.description}\n                                    </span>\n                                    }\n                                </>\n                                :\n                                <>\n                                    {this.renderTimeBooking(dataTime)}\n                                </>\n                            }\n                            \n                        </div>\n                    </div>\n                    \n                </div>\n                <div className=\"price\">\n                    <FormattedMessage id=\"patient.booking-modal.price\"/>\n                    {dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.VI &&\n                        <NumberFormat \n                            className=\"currency\"\n                            value={dataProfile.Doctor_infor.priceTypeData.valueVi}\n                            displayType={'text'}\n                            thousandSeparator = {true}\n                            suffix = {'VND'}\n                        />\n                    }\n                    {dataProfile && dataProfile.Doctor_infor && language === LANGUAGES.EN &&\n                        <NumberFormat \n                            className=\"currency\"\n                            value={dataProfile.Doctor_infor.priceTypeData.valueEn}\n                            displayType={'text'}\n                            thousandSeparator = {true}\n                            suffix = {'$'}\n                        />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        language: state.app.language\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);"]},"metadata":{},"sourceType":"module"}