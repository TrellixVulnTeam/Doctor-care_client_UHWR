{"ast":null,"code":"var _jsxFileName = \"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DoctorSchedule.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport './DoctorSchedule.scss';\nimport moment from 'moment';\nimport localization from 'moment/locale/vi';\nimport { LANGUAGES } from '../../../utils';\nimport { getScheduleDoctorByDate } from '../../../services/userService';\nimport { FormattedMessage } from 'react-intl';\nimport BookingModal from './Modal/BookingModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass DoctorSchedule extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getArrDays = language => {\n      let allDays = [];\n\n      for (let i = 0; i < 7; i++) {\n        let object = {};\n\n        if (language === LANGUAGES.VI) {\n          if (i === 0) {\n            let ddMM = moment(new Date()).format('DD/MM');\n            let today = `Hom nay -${ddMM}`;\n            object.label = today;\n          } else {\n            let lableVi = moment(new Date()).add(i, 'days').format('ddd - DD/MM');\n            object.label = this.capitalizeFirstLetter(lableVi);\n          }\n        } else {\n          if (i === 0) {\n            let ddMM = moment(new Date()).format('DD/MM');\n            let today = `Today - ${ddMM}`;\n            object.label = today;\n          } else {\n            object.label = moment(new Date()).add(i, 'days').locale('en').format(\"ddd - DD/MM\");\n          }\n        }\n\n        object.value = moment(new Date()).add(i, 'days').startOf('day').valueOf();\n        allDays.push(object);\n      }\n\n      return allDays;\n    };\n\n    this.handleOnChangeSelect = async event => {\n      if (this.props.doctorIdFromParent && this.props.doctorIdFromParent !== -1) {\n        let doctorId = this.props.doctorIdFromParent;\n        let date = event.target.value;\n        let res = await getScheduleDoctorByDate(doctorId, date);\n\n        if (res && res.errCode === 0) {\n          this.setState({\n            allAvalableTime: res.data ? res.data : []\n          });\n        }\n\n        console.log('check res schedule from react: ', this.state.allAvalableTime);\n      }\n    };\n\n    this.handleClickScheduleTime = time => {\n      this.setState({\n        isOpenModalBooking: true,\n        dataScheduleTimeModal: time\n      });\n      console.log(`check time:`, time);\n    };\n\n    this.closeBookingClose = () => {\n      this.setState({\n        isOpenModalBooking: false\n      });\n    };\n\n    this.state = {\n      allDays: [],\n      allAvalableTime: [],\n      isOpenModalBooking: false,\n      dataScheduleTimeModal: {}\n    };\n  }\n\n  async componentDidMount() {\n    let {\n      language\n    } = this.props;\n    let allDays = this.getArrDays(language);\n\n    if (this.props.doctorIdFromParent) {\n      let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\n      this.setState({\n        allAvalableTime: res.data ? res.data : []\n      });\n    }\n\n    this.setState({\n      allDays: allDays\n    });\n  }\n\n  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  async componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.language !== prevProps.language) {\n      let allDays = this.getArrDays(this.props.language);\n      this.setState({\n        allDays: allDays\n      });\n    }\n\n    if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\n      let allDays = this.getArrDays(this.props.language);\n      let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\n      this.setState({\n        allAvalableTime: res.data ? res.data : []\n      });\n    }\n  }\n\n  render() {\n    let {\n      allDays,\n      allAvalableTime,\n      isOpenModalBooking,\n      dataScheduleTimeModal\n    } = this.state;\n    let {\n      language\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"doctor-schedule-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"all-schedule\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: event => this.handleOnChangeSelect(event),\n            children: allDays && allDays.length > 0 && allDays.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.value,\n                children: item.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"all-available-time\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-calendar\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-calendar-alt\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                  id: \"patient.detail-doctor.schedule\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 70\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 64\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-content\",\n            children: allAvalableTime && allAvalableTime.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"time-content-btns\",\n                children: allAvalableTime.map((item, index) => {\n                  let timeDisplay = language === LANGUAGES.VI ? item.timeTypeData.valueVi : item.timeTypeData.valueEn;\n                  return /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: language === LANGUAGES.VI ? 'btn-vie' : 'btn-en',\n                    onClick: () => this.handleClickScheduleTime(item),\n                    children: timeDisplay\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"book-free\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [/*#__PURE__*/_jsxDEV(FormattedMessage, {\n                    id: \"patient.detail-doctor.choose\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fas fa-hand-point-up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                    id: \"patient.detail-doctor.book-free\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-schedule\",\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"patient.detail-doctor.no-schedule\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BookingModal, {\n        isOpenModal: isOpenModalBooking,\n        closeBookingClose: this.closeBookingClose,\n        dataTime: dataScheduleTimeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.app.language\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorSchedule);","map":{"version":3,"sources":["/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Doctor/DoctorSchedule.js"],"names":["React","Component","connect","moment","localization","LANGUAGES","getScheduleDoctorByDate","FormattedMessage","BookingModal","DoctorSchedule","constructor","props","getArrDays","language","allDays","i","object","VI","ddMM","Date","format","today","label","lableVi","add","capitalizeFirstLetter","locale","value","startOf","valueOf","push","handleOnChangeSelect","event","doctorIdFromParent","doctorId","date","target","res","errCode","setState","allAvalableTime","data","console","log","state","handleClickScheduleTime","time","isOpenModalBooking","dataScheduleTimeModal","closeBookingClose","componentDidMount","string","charAt","toUpperCase","slice","componentDidUpdate","prevProps","prevState","snapshot","render","length","map","item","index","timeDisplay","timeTypeData","valueVi","valueEn","mapStateToProps","app","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport './DoctorSchedule.scss';\nimport moment from 'moment';\nimport localization from 'moment/locale/vi';\nimport {LANGUAGES} from '../../../utils';\nimport {getScheduleDoctorByDate} from '../../../services/userService';\nimport {FormattedMessage} from 'react-intl';\nimport BookingModal from './Modal/BookingModal';\n\nclass DoctorSchedule extends Component {\n    constructor(props){\n        super(props);\n            this.state = {\n                allDays: [],\n                allAvalableTime: [],\n                isOpenModalBooking: false,\n                dataScheduleTimeModal: {}\n            }\n    }\n    async componentDidMount() {\n        let {language} = this.props;  \n        let allDays = this.getArrDays(language);\n\n        if (this.props.doctorIdFromParent){\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\n            this.setState({\n                allAvalableTime: res.data ? res.data : []   \n            })\n        }\n        this.setState({\n            allDays: allDays,  \n        })      \n    }\n    capitalizeFirstLetter(string){\n        return string.charAt(0).toUpperCase()+ string.slice(1);\n    }\n    getArrDays = (language) => {\n        let allDays = []\n        for (let i = 0; i<7; i++) {\n            let object = {};\n            if (language === LANGUAGES.VI){\n            \n                if(i===0){\n                    let ddMM = moment(new Date()).format('DD/MM');\n                    let today = `Hom nay -${ddMM}`;\n                    object.label = today;\n                }else {\n                    let lableVi = moment(new Date()).add(i, 'days').format('ddd - DD/MM')\n                    object.label = this.capitalizeFirstLetter(lableVi)\n                }\n\n            }else{\n                if (i === 0){\n                    let ddMM = moment(new Date()).format('DD/MM');\n                    let today = `Today - ${ddMM}`;\n                    object.label = today;\n                } else{\n                    object.label = moment(new Date()).add(i, 'days').locale('en').format(\"ddd - DD/MM\");\n                }\n                \n            }\n            object.value = moment(new Date()).add(i, 'days').startOf('day').valueOf();\n            allDays.push(object);\n        }\n        return allDays;\n        \n    }\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if(this.props.language !== prevProps.language) {\n            let allDays = this.getArrDays(this.props.language);\n            this.setState({\n                allDays: allDays\n            })\n        }\n        if(this.props.doctorIdFromParent !== prevProps.doctorIdFromParent){\n            let allDays = this.getArrDays(this.props.language);\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\n            this.setState({\n                allAvalableTime: res.data ? res.data : []\n            })\n        }\n    }\n    handleOnChangeSelect = async (event) => {\n        if (this.props.doctorIdFromParent && this.props.doctorIdFromParent !== -1){\n            let doctorId = this.props.doctorIdFromParent;\n            let date = event.target.value;\n            let res = await getScheduleDoctorByDate(doctorId, date);\n            \n\n            if (res && res.errCode === 0){\n                this.setState({\n                    allAvalableTime: res.data ? res.data : []\n                })\n            }\n            console.log('check res schedule from react: ', this.state.allAvalableTime)\n        }\n    }\n\n    handleClickScheduleTime = (time) => {\n        this.setState({\n            isOpenModalBooking: true,\n            dataScheduleTimeModal: time\n        })\n        console.log(`check time:`, time)\n    }\n\n    closeBookingClose = () => {\n        this.setState({\n            isOpenModalBooking: false\n        })\n    }\n    render() {\n        let {allDays, allAvalableTime, isOpenModalBooking, dataScheduleTimeModal} = this.state;\n        let {language} = this.props;\n        return(\n            <>\n                <div className=\"doctor-schedule-container\">\n                    <div className=\"all-schedule\">\n                        <select onChange={(event) => this.handleOnChangeSelect(event)}>\n                            {allDays && allDays.length > 0 &&\n                                allDays.map((item, index) =>{\n                                    return(\n                                        <option\n                                            value={item.value}\n                                            key={index}\n                                        >\n                                            {item.label}\n                                        </option>\n                                    )\n                                })}\n                        </select>\n                    </div>\n                    <div className=\"all-available-time\">\n                        <div className=\"text-calendar\">\n                            <i className=\"fas fa-calendar-alt\"><span><FormattedMessage id=\"patient.detail-doctor.schedule\"/></span></i>\n                        </div>\n                        <div className=\"time-content\">\n                            {allAvalableTime && allAvalableTime.length > 0 ?\n                                <>\n                                    <div className=\"time-content-btns\">\n                                        {allAvalableTime.map((item, index) => {\n                                            let timeDisplay = language === LANGUAGES.VI ?\n                                                item.timeTypeData.valueVi : item.timeTypeData.valueEn;\n                                            return(\n                                                <button key={index}\n                                                    className={language === LANGUAGES.VI ? 'btn-vie' : 'btn-en'}\n                                                    onClick={()=> this.handleClickScheduleTime(item)}\n                                                    >\n                                                    {timeDisplay}\n                                                </button>\n                                            )\n                                        })}\n                                    </div>\n                                    <div className=\"book-free\">\n                                        <span>\n                                            <FormattedMessage id=\"patient.detail-doctor.choose\"/>\n                                            <i className=\"fas fa-hand-point-up\"></i>\n                                            <FormattedMessage id =\"patient.detail-doctor.book-free\"/>\n                                        </span>\n                                    </div>\n                                </>\n                                :\n                                <div className=\"no-schedule\">\n                                    <FormattedMessage id=\"patient.detail-doctor.no-schedule\"/>\n                                </div>\n\n                                \n                            }\n                        </div>\n                    </div>\n                </div>\n                <BookingModal\n                    isOpenModal={isOpenModalBooking}\n                    closeBookingClose= {this.closeBookingClose}\n                    dataTime= {dataScheduleTimeModal}\n                />    \n            </>\n            \n        );\n    }\n    \n}\nconst mapStateToProps = state => {\n    return{\n        language: state.app.language,\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return{};\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorSchedule);"]},"metadata":{},"sourceType":"module"}