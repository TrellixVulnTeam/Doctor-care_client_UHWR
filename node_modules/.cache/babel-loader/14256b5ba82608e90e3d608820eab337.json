{"ast":null,"code":"var _jsxFileName = \"/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/ManageDoctor.js\";\nimport React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport * as actions from \"../../../store/actions\";\nimport MarkdownIt from 'markdown-it';\nimport MdEditor from 'react-markdown-editor-lite'; //import style manually\n\nimport 'react-markdown-editor-lite/lib/index.css';\nimport './ManageDoctor.scss';\nimport Select from 'react-select';\nimport { LANGUAGES, CRUD_Actions } from '../../../utils';\nimport { getDetailInforDoctor } from \"../../../services/userService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: 'chocolate',\n  label: 'Chocolate'\n}, {\n  value: 'strawberry',\n  label: 'Strawberry'\n}, {\n  value: 'vanilla',\n  label: 'Vanilla'\n}];\nconst mdParser = new MarkdownIt();\n\nclass ManageDoctor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buildDataInputSelect = inputData => {\n      let result = [];\n      let {\n        language\n      } = this.props;\n\n      if (inputData && inputData.length > 0) {\n        inputData.map((item, index) => {\n          let object = {};\n          let labelVi = `${item.lastName} ${item.firstName}`;\n          let labelEn = `${item.firstName} ${item.lastName}`;\n          object.label = language === LANGUAGES.VI ? labelVi : labelEn;\n          object.value = item.id;\n          result.push(object);\n        });\n      }\n\n      return result;\n    };\n\n    this.handleEditorChange = ({\n      html,\n      text\n    }) => {\n      this.setState({\n        contentMarkdown: text,\n        contentHTML: html\n      });\n    };\n\n    this.handleSaveContentMarkdown = () => {\n      let {\n        hasOldData\n      } = this.state;\n      this.props.saveDetailDoctors({\n        doctorId: this.state.selectedOption.value,\n        contentHTML: this.state.contentHTML,\n        contentMarkdown: this.state.contentMarkdown,\n        description: this.state.description,\n        doctorId: this.state.selectedOption.value,\n        action: hasOldData === true ? CRUD_Actions.EDIT : CRUD_Actions.CREATE\n      });\n    };\n\n    this.handleChangeSelect = async selectedOption => {\n      this.setState({\n        selectedOption\n      });\n      let res = await getDetailInforDoctor(selectedOption.value);\n\n      if (res && res.errCode === 0 && res.data && res.data.Markdown) {\n        let markdown = res.data.Markdown;\n        this.setstate({\n          contentHTML: markdown.contentHTML,\n          contentMarkdown: markdown.contentMarkdown,\n          description: markdown.description,\n          hasOldData: true\n        });\n      } else {\n        this.setState({\n          contentHTML: '',\n          contentMarkdown: '',\n          description: '',\n          hasOldData: ''\n        });\n      }\n    };\n\n    this.handleOnChangeDesc = event => {\n      this.setState({\n        description: event.target.value\n      });\n    };\n\n    this.state = {\n      doctorId: '',\n      contentMarkdown: '',\n      contentHTML: '',\n      selectedOption: '',\n      description: '',\n      listDoctors: [],\n      hasOldData: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllDoctors();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.allDoctors !== this.props.allDoctors) {\n      let dataSelect = this.buildDataInputSelect(this.props.allDoctors);\n      this.setState({\n        listDoctors: dataSelect\n      });\n    }\n\n    if (prevProps.language !== this.props.language) {\n      let dataSelect = this.buildDataInputSelect(this.props.allDoctors);\n      this.setState({\n        listDoctors: dataSelect\n      });\n    }\n  }\n\n  render() {\n    let {\n      hasOldData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manage-doctor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manage-doctor-title\",\n        children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: \"admin.manage-doctor.title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"more-infor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-left form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"admin.manage-doctor.select-doctor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: this.state.selectedOption,\n            onChange: this.handleChangeSelect,\n            options: this.state.listDoctors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"admin.manage-doctor.intro\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            rows: \"4\",\n            onChange: event => this.handleOnChangeDesc(event),\n            value: this.state.description,\n            children: \"acira\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manage-doctor-editor\",\n        children: /*#__PURE__*/_jsxDEV(MdEditor, {\n          style: {\n            height: '500px'\n          },\n          renderHTML: text => mdParser.render(text),\n          onChange: this.handleEditorChange,\n          value: this.state.contentMarkdown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleSaveContentMarkdown(),\n        className: hasOldData === true ? \"save-content-doctor\" : \"create-content-doctor\",\n        children: hasOldData === true ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n            id: \"admin.manage-doctor.save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n            id: \"admin.manage-add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.app.language,\n    allDoctors: state.admin.allDoctors\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\n    saveDetailDoctors: data => dispatch(actions.saveDetailDoctors(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);","map":{"version":3,"sources":["/home/asus2/Frontend-React.JS-QuickStart/src/containers/System/Admin/ManageDoctor.js"],"names":["React","Component","FormattedMessage","connect","actions","MarkdownIt","MdEditor","Select","LANGUAGES","CRUD_Actions","getDetailInforDoctor","options","value","label","mdParser","ManageDoctor","constructor","props","buildDataInputSelect","inputData","result","language","length","map","item","index","object","labelVi","lastName","firstName","labelEn","VI","id","push","handleEditorChange","html","text","setState","contentMarkdown","contentHTML","handleSaveContentMarkdown","hasOldData","state","saveDetailDoctors","doctorId","selectedOption","description","action","EDIT","CREATE","handleChangeSelect","res","errCode","data","Markdown","markdown","setstate","handleOnChangeDesc","event","target","listDoctors","componentDidMount","fetchAllDoctors","componentDidUpdate","prevProps","prevState","snapshot","allDoctors","dataSelect","render","height","mapStateToProps","app","admin","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from \"../../../store/actions\";\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\n//import style manually\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport './ManageDoctor.scss';\r\nimport Select from 'react-select';\r\nimport {LANGUAGES, CRUD_Actions} from '../../../utils';\r\nimport {getDetailInforDoctor} from \"../../../services/userService\"\r\n\r\nconst options = [\r\n    {value: 'chocolate', label: 'Chocolate'},\r\n    {value: 'strawberry', label:'Strawberry'},\r\n    {value:'vanilla', label:'Vanilla'},\r\n];\r\nconst mdParser = new MarkdownIt();\r\n\r\nclass ManageDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            doctorId:'',\r\n            contentMarkdown:'',\r\n            contentHTML:'',\r\n            selectedOption:'',\r\n            description:'',\r\n            listDoctors:[],\r\n            hasOldData: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors()\r\n    }\r\n\r\n    buildDataInputSelect = (inputData) => {\r\n        let result = [];\r\n        let {language} = this.props;\r\n        if(inputData && inputData.length > 0){\r\n            inputData.map((item, index)=>{\r\n                let object = {};\r\n                let labelVi = `${item.lastName} ${item.firstName}`;\r\n                let labelEn = `${item.firstName} ${item.lastName}`;\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = item.id;\r\n                result.push(object);\r\n            })\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.allDoctors !== this.props.allDoctors){\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n            this.setState({\r\n                listDoctors:dataSelect\r\n            })\r\n        }\r\n        if(prevProps.language !== this.props.language){\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n            this.setState({\r\n                listDoctors:dataSelect\r\n            })\r\n        }\r\n    }\r\n    handleEditorChange = ({html, text}) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html,\r\n        })\r\n    }\r\n    handleSaveContentMarkdown = () => {\r\n        let {hasOldData} = this.state;\r\n        this.props.saveDetailDoctors({\r\n            doctorId: this.state.selectedOption.value,\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            description:this.state.description,\r\n            doctorId: this.state.selectedOption.value,\r\n            action: hasOldData === true ? CRUD_Actions.EDIT : CRUD_Actions.CREATE\r\n            \r\n        });\r\n    }\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({selectedOption});\r\n        let res = await getDetailInforDoctor(selectedOption.value);\r\n        if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n            let markdown = res.data.Markdown;\r\n            this.setstate({\r\n                contentHTML: markdown.contentHTML,\r\n                contentMarkdown: markdown.contentMarkdown,\r\n                description: markdown.description,\r\n                hasOldData: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                contentHTML: '',\r\n                contentMarkdown:'',\r\n                description: '',\r\n                hasOldData:'',\r\n\r\n            })\r\n        }\r\n    };\r\n    handleOnChangeDesc = (event) => {\r\n        this.setState({description: event.target.value})\r\n    }\r\n    \r\n    render(){\r\n        let {hasOldData} = this.state;\r\n        return(\r\n            \r\n                <div className=\"manage-doctor-container\">\r\n                    <div className=\"manage-doctor-title\">\r\n                        <FormattedMessage id=\"admin.manage-doctor.title\"/>\r\n                    </div>\r\n                    <div className=\"more-infor\">\r\n                        <div className=\"content-left form-group\">\r\n                            <label>< FormattedMessage id=\"admin.manage-doctor.select-doctor\"/></label>\r\n                            <Select\r\n                                value={this.state.selectedOption}\r\n                                onChange = {this.handleChangeSelect}\r\n                                options ={this.state.listDoctors}\r\n                            />\r\n                        </div>\r\n                        <div className=\"content-right\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.intro\"/></label>\r\n                            <textarea className=\"form-control\" rows=\"4\"\r\n                                onChange = {(event) =>this.handleOnChangeDesc(event)}\r\n                                value = {this.state.description}\r\n                                >acira</textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"manage-doctor-editor\">\r\n                        <MdEditor\r\n                            style={{height: '500px'}}\r\n                            renderHTML = {text => mdParser.render(text)}\r\n                            onChange = {this.handleEditorChange}\r\n                            value = {this.state.contentMarkdown}\r\n                        />\r\n                    </div>\r\n                    <button\r\n                    onClick = {() => this.handleSaveContentMarkdown()}\r\n                    className= {hasOldData === true ? \"save-content-doctor\": \"create-content-doctor\"}\r\n                    >{hasOldData === true ? \r\n                    <span><FormattedMessage id=\"admin.manage-doctor.save\"/></span> \r\n                    : \r\n                    <span><FormattedMessage id=\"admin.manage-add\"/></span>\r\n                    }\r\n                    </button>\r\n                </div>\r\n\r\n            \r\n        )\r\n    }\r\n}const mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        saveDetailDoctors: (data) => dispatch(actions.saveDetailDoctors(data))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);"]},"metadata":{},"sourceType":"module"}