{"ast":null,"code":"var _jsxFileName = \"/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Specialty/DetailSpecialty.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './DetailSpecialty.scss';\nimport HomeHeader from '../../HomePage/HeaderHome';\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\nimport DoctorExtraInfor from \"../Doctor/DoctorExtraInfor\";\nimport ProfileDoctor from \"../Doctor/ProfileDoctor\";\nimport { getAllDetailSpecialty, getAllCodeService } from '../../../services/userService';\nimport _ from 'lodash';\nimport { LANGUAGES } from '../../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DetailSpecialty extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnchangeSelect = event => {\n      console.log('check onchange:', event.target.value);\n    };\n\n    this.state = {\n      arrDoctorId: [],\n      dataDetailSpecialty: {},\n      listProvince: []\n    };\n  }\n\n  async componentDidMount() {\n    if (this.props.match && this.props.match.params && this.props.match.params.id) {\n      let id = this.props.match.params.id;\n      let res = await getAllDetailSpecialtyById({\n        id: id,\n        location: 'ALL'\n      });\n      let resProvince = await getAllCodeService('PROVINCE');\n\n      if (res && res.errCode === 0 && resProvince && resProvince.errCode === 0) {\n        let data = res.data;\n        let arrDoctorId = [];\n\n        if (data && !_.isEmpty(res.data)) {\n          let arr = data.doctorSpecialty;\n\n          if (arr && arr.length > 0) {\n            arr.map(item => {\n              arrDoctorId.push(item.doctorId);\n            });\n          }\n        }\n\n        this.setState({\n          dataDetailSpecialty: res.data,\n          arrDoctorId: arrDoctorId,\n          listProvince: resProvince.data\n        });\n      }\n    }\n  }\n\n  async componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.language !== prevProps.language) {}\n  }\n\n  render() {\n    let {\n      arrDoctorId,\n      dataDetailSpecialty,\n      listProvince\n    } = this.state;\n    console.log('check state', this.state);\n    let {\n      language\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detail-specialty-container\",\n      children: [/*#__PURE__*/_jsxDEV(HomeHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detail-specialty-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"description-spcialty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), arrDoctorId && arrDoctorId.length > 0 && arrDoctorId.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"each-doctor\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dt-content-left\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"profile-doctor\",\n                children: /*#__PURE__*/_jsxDEV(ProfileDoctor, {\n                  doctorId: item,\n                  isShowDescriptionDoctor: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dt-content-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"doctor-schdule\",\n                children: /*#__PURE__*/_jsxDEV(DoctorSchedule, {\n                  doctorIdFromParent: item\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"doctor-extra-infor\",\n                children: /*#__PURE__*/_jsxDEV(DoctorExtraInfor, {\n                  doctorIdFromParent: item\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.app.language\n  };\n};\n\nconst mapDispatchToProps = dispath => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);","map":{"version":3,"sources":["/home/asus2/Frontend-React.JS-QuickStart/src/containers/Patient/Specialty/DetailSpecialty.js"],"names":["React","Component","connect","FormattedMessage","HomeHeader","DoctorSchedule","DoctorExtraInfor","ProfileDoctor","getAllDetailSpecialty","getAllCodeService","_","LANGUAGES","DetailSpecialty","constructor","props","handleOnchangeSelect","event","console","log","target","value","state","arrDoctorId","dataDetailSpecialty","listProvince","componentDidMount","match","params","id","res","getAllDetailSpecialtyById","location","resProvince","errCode","data","isEmpty","arr","doctorSpecialty","length","map","item","push","doctorId","setState","componentDidUpdate","prevProps","prevState","snapshot","language","render","index","mapStateToProps","app","mapDispatchToProps","dispath"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport './DetailSpecialty.scss';\nimport HomeHeader from '../../HomePage/HeaderHome';\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\nimport DoctorExtraInfor from \"../Doctor/DoctorExtraInfor\";\nimport ProfileDoctor from \"../Doctor/ProfileDoctor\";\nimport {getAllDetailSpecialty, getAllCodeService} from '../../../services/userService';\nimport _ from 'lodash';\nimport {LANGUAGES} from '../../../utils';\n\nclass DetailSpecialty extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            arrDoctorId: [],\n            dataDetailSpecialty: {},\n            listProvince: []\n        }\n    }\n\n    async componentDidMount(){\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id;\n\n            let res = await getAllDetailSpecialtyById({\n                id: id,\n                location: 'ALL'\n            });\n\n            let resProvince = await  getAllCodeService('PROVINCE');\n            if (res && res.errCode === 0 && resProvince && resProvince.errCode === 0){\n                let data = res.data;\n                let arrDoctorId= [];\n                if (data && !_.isEmpty(res.data)){\n                    let arr = data.doctorSpecialty;\n                    if (arr && arr.length > 0){\n                        arr.map(item => {\n                            arrDoctorId.push(item.doctorId)\n                        })\n                    }\n                }\n\n                this.setState({\n                    dataDetailSpecialty: res.data,\n                    arrDoctorId : arrDoctorId,\n                    listProvince: resProvince.data\n                })\n            }\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot){\n        if (this.props.language !== prevProps.language){\n\n        }\n    }\n\n    handleOnchangeSelect = (event) => {\n        console.log('check onchange:', event.target.value)\n    }\n\n    render(){\n        let {arrDoctorId, dataDetailSpecialty, listProvince} = this.state;\n        console.log('check state', this.state)\n        let {language} = this.props;\n        return(\n            <div className=\"detail-specialty-container\">\n                <HomeHeader />\n                <div className=\"detail-specialty-body\">\n                    <div className=\"description-spcialty\">\n\n                    </div>\n                    {arrDoctorId && arrDoctorId.length > 0 &&\n                        arrDoctorId.map((item, index) => {\n                            return (\n                                <div className=\"each-doctor\" key= {index}>\n                                    <div className=\"dt-content-left\">\n                                        <div className=\"profile-doctor\">\n                                            <ProfileDoctor\n                                                doctorId={item}\n                                                isShowDescriptionDoctor={true}\n                                            />    \n                                        </div>\n                                    </div>\n                                    <div className=\"dt-content-right\">\n                                        <div className=\"doctor-schdule\">\n                                            <DoctorSchedule\n                                                doctorIdFromParent={item}\n                                            />\n\n                                        </div>\n                                        <div className=\"doctor-extra-infor\">\n                                            <DoctorExtraInfor\n                                                doctorIdFromParent={item}\n                                            />\n                                            \n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                </div>\n            </div>\n            \n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        language: state.app.language,\n\n    };\n};\nconst mapDispatchToProps = dispath => {\n    return {};\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);"]},"metadata":{},"sourceType":"module"}